{
  "openapi": "3.0.1",
  "info": {
    "title": "宠物商店",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "宠物"
    },
    {
      "name": "Store API/Regions"
    },
    {
      "name": "Regions"
    },
    {
      "name": "Store API/Products"
    },
    {
      "name": "Products"
    },
    {
      "name": "Store API/Customers"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Store API/Product Variants"
    },
    {
      "name": "Product Variants"
    },
    {
      "name": "Store API/Product Tags"
    },
    {
      "name": "Product Tags"
    },
    {
      "name": "Store API/Product Categories"
    },
    {
      "name": "Product Categories"
    },
    {
      "name": "Store API/Payment Collections"
    },
    {
      "name": "Payment Collections"
    },
    {
      "name": "Store API/Product Collections"
    },
    {
      "name": "Product Collections"
    },
    {
      "name": "Store API/Product Types"
    },
    {
      "name": "Product Types"
    },
    {
      "name": "Store API/Order Edits"
    },
    {
      "name": "Order Edits"
    },
    {
      "name": "Store API/Returns"
    },
    {
      "name": "Returns"
    },
    {
      "name": "Store API/Return Reasons"
    },
    {
      "name": "Return Reasons"
    },
    {
      "name": "Store API/Carts"
    },
    {
      "name": "Carts"
    },
    {
      "name": "Store API/Auth"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Store API/Shipping Options"
    },
    {
      "name": "Shipping Options"
    },
    {
      "name": "Store API/Orders"
    },
    {
      "name": "Orders"
    },
    {
      "name": "Store API/Swaps"
    },
    {
      "name": "Swaps"
    },
    {
      "name": "Store API/Gift Cards"
    },
    {
      "name": "Gift Cards"
    },
    {
      "name": "v1.0"
    }
  ],
  "paths": {
    "/pet/{petId}": {
      "get": {
        "summary": "查询宠物详情",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "宠物 ID",
            "required": true,
            "example": 1,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "ID 编号"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "examples": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "title": "宠物ID"
                    },
                    "category": {
                      "$ref": "#/components/schemas/Category",
                      "title": "分类"
                    },
                    "name": {
                      "type": "string",
                      "title": "宠物名称",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      },
                      "title": "照片URL"
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      },
                      "title": "标签"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ],
                      "title": "销售状态"
                    },
                    "createTime": {
                      "type": "string",
                      "title": "创建时间"
                    },
                    "location": {
                      "$ref": "#/components/schemas/Localtion",
                      "title": "位置"
                    }
                  },
                  "required": [
                    "name",
                    "photoUrls"
                  ]
                },
                "example": {
                  "name": "离问适示正省",
                  "photoUrls": [
                    "http://dummyimage.com/400x400",
                    "http://dummyimage.com/400x400"
                  ],
                  "createTime": "2007-10-07 13:34:07",
                  "status": "sold",
                  "location": {
                    "province": "辽宁省",
                    "city": "重庆市",
                    "district": "绍兴县"
                  },
                  "id": 62781747,
                  "tags": [
                    {
                      "id": 13906489,
                      "name": "想好他机再支"
                    }
                  ],
                  "category": {
                    "name": "走千张拉规",
                    "id": -20266382
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFailure"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseFailure"
                }
              }
            },
            "headers": {}
          },
          "x-404:记录不存在": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              }
            },
            "headers": {}
          },
          "x-400:参数不正确": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "新建宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "title": "宠物名",
                    "description": "名称"
                  },
                  "category": {
                    "type": "string"
                  },
                  "birthday": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "category",
                  "birthday",
                  "01JC5ARJVJ1NTNDE210NT60QH9"
                ]
              },
              "examples": {
                "4": {
                  "value": {
                    "name": "考紫林",
                    "category": "do in Ut tempor",
                    "birthday": "1977-08-04"
                  },
                  "summary": "示例 4"
                },
                "example1": {
                  "x-demo": true,
                  "x-scenario": "error_case",
                  "value": {
                    "name": "张三",
                    "category": "Lorem eu non",
                    "birthday": "2009-05-10"
                  },
                  "summary": "示例 1",
                  "description": "这是一个`示例 1`"
                },
                "example2": {
                  "value": {
                    "name": "昂婷婷",
                    "category": "et",
                    "birthday": "2012-10-28"
                  },
                  "summary": "示例 2",
                  "description": "这是一个`示例 2`"
                },
                "example3": {
                  "value": {
                    "name": "边明",
                    "category": "consectetur et exercitation id",
                    "birthday": "1993-05-01"
                  },
                  "summary": "示例 3",
                  "description": "这是一个`示例 3`"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "title": "宠物ID"
                    },
                    "category": {
                      "$ref": "#/components/schemas/Category",
                      "title": "分类"
                    },
                    "name": {
                      "type": "string",
                      "title": "宠物名称",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                      },
                      "items": {
                        "type": "string"
                      },
                      "title": "照片URL"
                    },
                    "tags": {
                      "type": "array",
                      "xml": {
                        "name": "tag",
                        "wrapped": true
                      },
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      },
                      "title": "标签"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ],
                      "title": "销售状态"
                    },
                    "createTime": {
                      "type": "string",
                      "title": "创建时间"
                    },
                    "location": {
                      "$ref": "#/components/schemas/Localtion",
                      "title": "位置"
                    }
                  },
                  "required": [
                    "name",
                    "photoUrls",
                    "status"
                  ]
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "delete": {
        "summary": "删除宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pet/findByStatus": {
      "get": {
        "summary": "根据状态查找宠物列表",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "",
            "required": true,
            "example": "Bearer {{token}}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "title": "宠物ID"
                      },
                      "category": {
                        "$ref": "#/components/schemas/Category",
                        "title": "分类"
                      },
                      "name": {
                        "type": "string",
                        "title": "宠物名称",
                        "examples": [
                          "doggie"
                        ]
                      },
                      "photoUrls": {
                        "type": "array",
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string"
                        },
                        "title": "照片URL"
                      },
                      "tags": {
                        "type": "array",
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "$ref": "#/components/schemas/Tag"
                        },
                        "title": "标签"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ],
                        "title": "销售状态"
                      },
                      "createTime": {
                        "type": "string",
                        "title": "创建时间"
                      },
                      "location": {
                        "$ref": "#/components/schemas/Localtion",
                        "title": "位置"
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 4
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pet/{id}": {
      "put": {
        "summary": "修改宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "type": "object",
                    "properties": {}
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "doggie"
                    ]
                  },
                  "photoUrls": {
                    "type": "array",
                    "xml": {
                      "name": "photoUrl",
                      "wrapped": true
                    },
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "xml": {
                      "name": "tag",
                      "wrapped": true
                    },
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "xml": {
                  "name": "Pet"
                }
              },
              "example": {
                "id": 76,
                "category": {},
                "name": "doggie",
                "photoUrls": [
                  "https://loremflickr.com/400/400?lock=4013430241553630"
                ],
                "tags": [],
                "status": "pending"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/regions": {
      "get": {
        "summary": "获取地区列表",
        "deprecated": false,
        "description": "检索地区列表。地区可以通过诸如 `created_at` 之类的字段进行过滤。地区也可以分页。此 API 路由可用于向客户展示所有可供选择的地区。",
        "operationId": "GetRegions",
        "tags": [
          "Store API/Regions",
          "Regions"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "检索地区时要跳过的地区数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的地区数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "lt",
            "in": "query",
            "description": "按小于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gt",
            "in": "query",
            "description": "按大于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lte",
            "in": "query",
            "description": "按小于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gte",
            "in": "query",
            "description": "按大于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreRegionsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/regions/{id}": {
      "get": {
        "summary": "获取地区",
        "deprecated": false,
        "description": "检索地区的详细信息。",
        "operationId": "GetRegionsRegion",
        "tags": [
          "Store API/Regions",
          "Regions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "地区的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreRegionsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/products/search": {
      "post": {
        "summary": "搜索产品",
        "deprecated": false,
        "description": "使用安装在 Medusa 后端上的搜索服务对产品运行搜索查询。搜索是通过搜索服务处理的，因此返回数据的格式取决于您使用的搜索服务。",
        "operationId": "PostProductsSearch",
        "tags": [
          "Store API/Products",
          "Products"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostSearchReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePostSearchRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/products": {
      "get": {
        "summary": "获取产品列表",
        "deprecated": false,
        "description": "检索产品列表。产品可以通过诸如 `id` 或 `q` 之类的字段进行过滤。产品也可以排序或分页。\n\n此 API 路由还可用于按其句柄检索产品。\n\n为了根据客户的上下文准确地为产品定价，强烈建议在可用时传递以下字段：\n\n`region_id`, `currency_code`, and `cart_id` when available.\n\n传递 `sales_channel_id` 可确保仅检索指定销售渠道中可用的产品。\n\n您也可以在请求标头中使用可发布的 API 密钥，而不是传递 `sales_channel_id`。\n",
        "operationId": "GetProducts",
        "tags": [
          "Store API/Products",
          "Products"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "用于搜索产品标题、描述、变体标题、变体 SKU 和集合标题的术语。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "按 ID 过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sales_channel_id",
            "in": "query",
            "description": "Filter by sales channel IDs. When provided, only products available in the selected sales channels are retrieved. Alternatively, you can pass a publishable API key in the request header and this will have the same effect.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "collection_id",
            "in": "query",
            "description": "按产品集合 ID 过滤。如果提供，则仅检索属于指定产品集合的产品。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type_id",
            "in": "query",
            "description": "按产品类型 ID 过滤。如果提供，则仅检索属于指定产品类型的产品。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "按产品标签 ID 过滤。如果提供，则仅检索属于指定产品标签的产品。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "按标题过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "按描述过滤",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handle",
            "in": "query",
            "description": "按句柄过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_giftcard",
            "in": "query",
            "description": "是否检索常规产品或礼品卡产品。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lt",
            "in": "query",
            "description": "按小于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gt",
            "in": "query",
            "description": "按大于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lte",
            "in": "query",
            "description": "按小于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gte",
            "in": "query",
            "description": "按大于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "按产品类别 ID 过滤。如果提供，则仅检索属于指定产品类别的产品。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_category_children",
            "in": "query",
            "description": "使用 `category_id` 字段进行过滤时，是否包含子产品类别。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "检索产品时要跳过的产品数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的产品数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的产品中扩展的逗号分隔关系。 products.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应包含在返回的产品中的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "用于对检索到的产品进行排序的产品字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cart_id",
            "in": "query",
            "description": "购物车的 ID。这对于基于购物车上下文进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "地区的 ID。这对于基于所选地区进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "3 个字符的 ISO 货币代码。这对于基于所选货币进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreProductsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/products/{id}": {
      "get": {
        "summary": "获取产品",
        "deprecated": false,
        "description": "检索产品的详细信息。为了根据客户的情况准确、正确地定价产品，强烈建议通过以下字段\n`region_id`, `currency_code`, and `cart_id` when available.\n\n传递 `sales_channel_id` 可确保仅检索当前销售渠道中可用的产品。\n\n您也可以在请求标头中使用可发布的 API 密钥，而不是传递 `sales_channel_id`。\n",
        "operationId": "GetProductsProduct",
        "tags": [
          "Store API/Products",
          "Products"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "产品的 ID",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sales_channel_id",
            "in": "query",
            "description": "客户查看产品的销售渠道的 ID。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cart_id",
            "in": "query",
            "description": "购物车的 ID。这对于基于购物车上下文进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "地区的 ID。这对于基于所选地区进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的产品中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应包含在返回的产品中的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "3 个字符的 ISO 货币代码。这对于基于所选货币进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreProductsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/password-token": {
      "post": {
        "summary": "请求密码重置",
        "deprecated": false,
        "description": "创建一个重置密码令牌，以便在后续的重置密码 API 路由中使用。这将发出 `customer.password_reset` 事件。如果在 Medusa 后端安装了通知提供程序，并且配置为处理此事件，则可能会向客户发送包含重置说明的通知，例如电子邮件。",
        "operationId": "PostCustomersCustomerPasswordToken",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersCustomerPasswordTokenReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/me/payment-methods": {
      "get": {
        "summary": "获取保存的支付方式",
        "deprecated": true,
        "description": "检索已登录客户保存的付款方式。此API路由仅适用于使用不推荐使用的支付服务接口创建的支付提供商。支付方式是使用支付服务的第三方服务保存的，而不是在美杜莎后端。因此，它们是从第三方服务中检索的。",
        "operationId": "GetCustomersCustomerPaymentMethods",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersListPaymentMethodsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/me/addresses": {
      "post": {
        "summary": "添加送货地址",
        "deprecated": false,
        "description": "将送货地址添加到客户的保存地址中。",
        "operationId": "PostCustomersCustomerAddresses",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersCustomerAddressesReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/me": {
      "post": {
        "summary": "更新客户",
        "deprecated": false,
        "description": "更新登录客户的详细信息。",
        "operationId": "PostCustomersCustomer",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersCustomerReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "summary": "获取客户",
        "deprecated": false,
        "description": "检索登录客户的详细信息。",
        "operationId": "GetCustomersCustomer",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/me/addresses/{address_id}": {
      "post": {
        "summary": "更新送货地址",
        "deprecated": false,
        "description": "更新登录客户的保存的送货地址的详细信息。",
        "operationId": "PostCustomersCustomerAddressesAddress",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "description": "地址的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersCustomerAddressesAddressReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "删除地址",
        "deprecated": false,
        "description": "从客户的保存地址中删除地址。",
        "operationId": "DeleteCustomersCustomerAddressesAddress",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "description": "要删除的地址的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers": {
      "post": {
        "summary": "创建客户",
        "deprecated": false,
        "description": "注册新客户。这也将自动对客户进行身份验证，并在响应Cookie标头中设置他们的登录会话。cookie会话可以在随后的请求中用于对客户进行身份验证。当使用美杜莎的JS或美杜莎React客户端时，cookie会自动附加到后续请求中。",
        "operationId": "PostCustomers",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "错误代码"
                    },
                    "type": {
                      "type": "string",
                      "description": "错误类型"
                    },
                    "message": {
                      "type": "string",
                      "description": "包含错误详细信息的人类可读消息"
                    }
                  }
                },
                "example": {
                  "code": "invalid_request_error",
                  "type": "duplicate_error",
                  "message": "A customer with the given email already has an account. Log in instead"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/password-reset": {
      "post": {
        "summary": "重置密码",
        "deprecated": false,
        "description": "使用先前通过请求密码重置 API 路由创建的密码令牌重置客户的密码。如果密码令牌已过期，则必须创建一个新的。",
        "operationId": "PostCustomersResetPassword",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersResetPasswordReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersResetPasswordRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/customers/me/orders": {
      "get": {
        "summary": "获取订单列表",
        "deprecated": false,
        "description": "检索登录客户的订单列表。订单可以通过诸如 `status` 或 `fulfillment_status` 之类的字段进行过滤。订单也可以分页。",
        "operationId": "GetCustomersCustomerOrders",
        "tags": [
          "Store API/Customers",
          "Customers"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "用于搜索订单显示 ID、电子邮件、送货地址的名字、客户的名字、客户的姓氏和客户的电话号码的术语。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "按 ID 过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "按状态过滤。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fulfillment_status",
            "in": "query",
            "description": "要搜索的配送状态。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "payment_status",
            "in": "query",
            "description": "要搜索的付款状态。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "display_id",
            "in": "query",
            "description": "按显示 ID 过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cart_id",
            "in": "query",
            "description": "按购物车 ID 过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "按电子邮件过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "按地区 ID 过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "按订单的 3 个字符的 ISO 货币代码过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tax_rate",
            "in": "query",
            "description": "按税率过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lt",
            "in": "query",
            "description": "按小于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gt",
            "in": "query",
            "description": "按大于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lte",
            "in": "query",
            "description": "按小于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gte",
            "in": "query",
            "description": "按大于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的订单数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "检索订单时要跳过的订单数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的订单中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应包含在返回的订单中的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCustomersListOrdersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/variants/{id}": {
      "get": {
        "summary": "获取产品变体",
        "deprecated": false,
        "description": "检索产品变体的详细信息。为了根据客户的上下文准确地为产品变体定价，强烈建议在可用时传递以下字段：\n\n`region_id`、`currency_code` 和 `cart_id`。\n\n传递 `sales_channel_id` 可确保仅检索当前销售渠道中可用产品的变体。\n\n您也可以在请求标头中使用可发布的 API 密钥，而不是传递 `sales_channel_id`。\n",
        "operationId": "GetVariantsVariant",
        "tags": [
          "Store API/Product Variants",
          "Product Variants"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "产品变体的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sales_channel_id",
            "in": "query",
            "description": "客户查看产品变体的销售渠道的 ID。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cart_id",
            "in": "query",
            "description": "购物车的 ID。这对于基于购物车上下文进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "地区的 ID。这对于基于所选地区进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "3 个字符的 ISO 货币代码。这对于基于所选货币进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreVariantsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/variants": {
      "get": {
        "summary": "获取产品变体",
        "deprecated": false,
        "description": "检索产品变体列表。产品变体可以通过诸如 `id` 或 `title` 之类的字段进行过滤。产品变体也可以分页。\n\n\n为了根据客户的情况准确、正确地定价产品变体，强烈建议通过以下字段\n`region_id`, `currency_code`, and `cart_id` when available.\n\n传递 `sales_channel_id` 可确保仅检索指定销售渠道中可用产品的变体。\n\nYou can alternatively use a publishable API key in the request header instead of passing a `sales_channel_id`.\n",
        "operationId": "GetVariants",
        "tags": [
          "Store API/Product Variants",
          "Product Variants"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "按逗号分隔的 ID 列表过滤。如果提供，它将覆盖 `id` 参数。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "按一个或多个 ID 过滤。如果提供 `ids`，它将覆盖此参数的值。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sales_channel_id",
            "in": "query",
            "description": "\"按销售渠道 ID 过滤。如果提供，则仅检索所选销售渠道中可用的产品。或者，您可以在请求标头中传递可发布的 API 密钥，这将具有相同的效果。\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的产品变体中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated fields that should be included in the returned product variants.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "检索产品变体时要跳过的产品数量。",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的产品变体数量。",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "cart_id",
            "in": "query",
            "description": "购物车的 ID。这对于基于购物车上下文进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "地区的 ID。这对于基于所选地区进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "3 个字符的 ISO 货币代码。这对于基于所选货币进行准确定价很有用。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "按标题过滤",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inventory_quantity",
            "in": "query",
            "description": "按可用库存数量过滤",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreVariantsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/product-tags": {
      "get": {
        "summary": "获取产品标签列表",
        "deprecated": false,
        "description": "检索产品标签列表。产品标签可以通过诸如 `id` 或 `q` 之类的字段进行过滤。产品标签也可以排序或分页。",
        "operationId": "GetProductTags",
        "tags": [
          "Store API/Product Tags",
          "Product Tags"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的产品标签数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "检索产品标签时要跳过的产品标签数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "用于对检索到的产品标签进行排序的产品标签字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discount_condition_id",
            "in": "query",
            "description": "按折扣条件的 ID 过滤。如果提供，则仅检索折扣条件适用的标签。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "按标签值过滤。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "按 ID 过滤。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "用于搜索产品标签值的术语。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lt",
            "in": "query",
            "description": "按小于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gt",
            "in": "query",
            "description": "按大于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lte",
            "in": "query",
            "description": "按小于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gte",
            "in": "query",
            "description": "按大于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreProductTagsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/product-categories": {
      "get": {
        "summary": "获取产品类别列表",
        "deprecated": false,
        "description": "检索产品类别列表。产品类别可以通过诸如 `handle` 或 `q` 之类的字段进行过滤。产品类别也可以分页。此 API 路由还可用于按句柄检索产品类别。",
        "operationId": "GetProductCategories",
        "tags": [
          "Store API/Product Categories",
          "Product Categories"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "用于搜索产品类别名称和句柄的术语。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handle",
            "in": "query",
            "description": "按句柄过滤。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parent_category_id",
            "in": "query",
            "description": "按父类别的 ID 过滤。仅检索提供的父类别的子类别。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_descendants_tree",
            "in": "query",
            "description": "是否应检索类别内的所有嵌套类别。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "检索产品类别时要跳过的产品类别数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的产品类别数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的产品类别中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应包含在返回的产品类别中的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreGetProductCategoriesRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/product-categories/{id}": {
      "get": {
        "summary": "获取产品类别",
        "deprecated": false,
        "description": "检索产品类别的详细信息。",
        "operationId": "GetProductCategoriesCategory",
        "tags": [
          "Store API/Product Categories",
          "Product Categories"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "产品类别的 ID",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应在返回的产品类别中扩展的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的产品类别中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreGetProductCategoriesCategoryRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/payment-collections/{id}/sessions/{session_id}/authorize": {
      "post": {
        "summary": "授权付款会话",
        "deprecated": false,
        "description": "授权付款集合的付款会话。",
        "operationId": "PostPaymentCollectionsSessionsSessionAuthorize",
        "tags": [
          "Store API/Payment Collections",
          "Payment Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "付款集合的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "付款会话的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePaymentCollectionsSessionRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/payment-collections/{id}/sessions/batch/authorize": {
      "post": {
        "summary": "授权支付会话",
        "deprecated": false,
        "description": "授权支付集合的支付会话。",
        "operationId": "PostPaymentCollectionsSessionsBatchAuthorize",
        "tags": [
          "Store API/Payment Collections",
          "Payment Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "付款集合的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostPaymentCollectionsBatchSessionsAuthorizeReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePaymentCollectionsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/payment-collections/{id}/sessions/{session_id}": {
      "post": {
        "summary": "刷新支付会话",
        "deprecated": false,
        "description": "刷新支付会话的数据以确保其与支付集合同步。",
        "operationId": "PostPaymentCollectionsPaymentCollectionPaymentSessionsSession",
        "tags": [
          "Store API/Payment Collections",
          "Payment Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "PaymentCollection 的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_id",
            "in": "path",
            "description": "要刷新的支付会话的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePaymentCollectionsSessionRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/payment-collections/{id}": {
      "get": {
        "summary": "获取支付集合",
        "deprecated": false,
        "description": "检索支付集合的详细信息。",
        "operationId": "GetPaymentCollectionsPaymentCollection",
        "tags": [
          "Store API/Payment Collections",
          "Payment Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "PaymentCollection 的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应在返回的付款集合中扩展的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的付款集合中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePaymentCollectionsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/payment-collections/{id}/sessions/batch": {
      "post": {
        "summary": "管理支付会话",
        "deprecated": false,
        "description": "创建、更新或删除付款集合的支付会话列表。如果在 `sessions` 数组中未提供支付会话，则会将其删除。",
        "operationId": "PostPaymentCollectionsPaymentCollectionSessionsBatch",
        "tags": [
          "Store API/Payment Collections",
          "Payment Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "付款集合的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostPaymentCollectionsBatchSessionsReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePaymentCollectionsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/payment-collections/{id}/sessions": {
      "post": {
        "summary": "创建支付会话",
        "deprecated": false,
        "description": "在付款集合中为付款提供程序创建支付会话。",
        "operationId": "PostPaymentCollectionsSessions",
        "tags": [
          "Store API/Payment Collections",
          "Payment Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "付款集合的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePaymentCollectionSessionsReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorePaymentCollectionsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/collections/{id}": {
      "get": {
        "summary": "获取产品集合",
        "deprecated": false,
        "description": "检索产品集合的详细信息。",
        "operationId": "GetCollectionsCollection",
        "tags": [
          "Store API/Product Collections",
          "Product Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "产品集合的 ID",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCollectionsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/collections": {
      "get": {
        "summary": "获取产品集合列表",
        "deprecated": false,
        "description": "检索产品集合的列表。产品集合可以通过“handle”或“created_at”等字段进行筛选。产品集合也可以进行分页。",
        "operationId": "GetCollections",
        "tags": [
          "Store API/Product Collections",
          "Product Collections"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The number of product collections to skip when retrieving the product collections.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的产品集合数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "handle",
            "in": "query",
            "description": "按句柄过滤",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lt",
            "in": "query",
            "description": "按小于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gt",
            "in": "query",
            "description": "按大于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lte",
            "in": "query",
            "description": "按小于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gte",
            "in": "query",
            "description": "按大于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCollectionsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/product-types": {
      "get": {
        "summary": "获取产品类型列表",
        "deprecated": false,
        "description": "检索产品类型列表。产品类型可以通过诸如 `value` 或 `q` 之类的字段进行过滤。产品类型也可以排序或分页。",
        "operationId": "GetProductTypes",
        "tags": [
          "Store API/Product Types",
          "Product Types"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "限制返回的产品类型数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "检索产品类型时要跳过的产品类型数量。",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "用于对检索到的产品类型进行排序的产品类型字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discount_condition_id",
            "in": "query",
            "description": "按折扣条件的 ID 过滤。如果提供，则仅检索折扣条件适用的类型。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "按类型值过滤。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "按 ID 过滤。",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "用于搜索产品类型值的术语。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lt",
            "in": "query",
            "description": "按小于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gt",
            "in": "query",
            "description": "按大于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "lte",
            "in": "query",
            "description": "按小于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "gte",
            "in": "query",
            "description": "按大于或等于此日期的日期过滤",
            "required": false,
            "example": [
              "",
              ""
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreProductTypesListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/order-edits/{id}/complete": {
      "post": {
        "summary": "完成订单编辑",
        "deprecated": false,
        "description": "完成订单编辑并将其更改反映到原始订单上。任何需要的额外付款必须先使用付款集合 API 路由授权。",
        "operationId": "PostOrderEditsOrderEditComplete",
        "tags": [
          "Store API/Order Edits",
          "Order Edits"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "订单编辑的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreOrderEditsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "5": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "6": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/order-edits/{id}": {
      "get": {
        "summary": "检索订单编辑",
        "deprecated": false,
        "description": "检索订单编辑的详细信息。",
        "operationId": "GetOrderEditsOrderEdit",
        "tags": [
          "Store API/Order Edits",
          "Order Edits"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "订单编辑的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreOrderEditsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/order-edits/{id}/decline": {
      "post": {
        "summary": "拒绝订单编辑",
        "deprecated": false,
        "description": "拒绝订单编辑。更改不会反映在原始订单上。",
        "operationId": "PostOrderEditsOrderEditDecline",
        "tags": [
          "Store API/Order Edits",
          "Order Edits"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "OrderEdit 的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostOrderEditsOrderEditDecline"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreOrderEditsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "5": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "6": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/returns": {
      "post": {
        "summary": "创建退货",
        "deprecated": false,
        "description": "为订单创建退货。如果指定了退货运送方式，则退货会自动完成。",
        "operationId": "PostReturns",
        "tags": [
          "Store API/Returns",
          "Returns"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostReturnsReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreReturnsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/return-reasons": {
      "get": {
        "summary": "获取退货原因列表",
        "deprecated": false,
        "description": "检索退货原因列表。这在店面中实现创建退货流程时非常有用。",
        "operationId": "GetReturnReasons",
        "tags": [
          "Store API/Return Reasons",
          "Return Reasons"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreReturnReasonsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/return-reasons/{id}": {
      "get": {
        "summary": "获取退货原因",
        "deprecated": false,
        "description": "检索退货原因的详细信息。",
        "operationId": "GetReturnReasonsReason",
        "tags": [
          "Store API/Return Reasons",
          "Return Reasons"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "退货原因的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreReturnReasonsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/payment-sessions": {
      "post": {
        "summary": "创建支付会话",
        "deprecated": false,
        "description": "为购物车所在地区的每个可用支付提供程序创建支付会话。如果只创建了一个支付会话，则默认情况下会选择该会话。支付会话的创建使用支付提供程序，并且可能需要向第三方服务发送请求。",
        "operationId": "PostCartsCartPaymentSessions",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/payment-sessions/{provider_id}/refresh": {
      "post": {
        "summary": "刷新支付会话",
        "deprecated": false,
        "description": "刷新支付会话以确保它与购物车同步。这通常是不必要的，但提供给边缘情况。",
        "operationId": "PostCartsCartPaymentSessionsSession",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "The ID of the Payment Provider that created the Payment Session to be refreshed.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts": {
      "post": {
        "summary": "创建购物车",
        "deprecated": false,
        "description": "创建购物车。虽然是可选的，但指定购物车的地区和销售渠道可能会影响购物车的定价和\n可以分别添加到购物车中的产品。因此，请确保尽早设置并在必要时进行更改，例如当客户更改其地区时。\n\n如果客户已登录，请确保在购物车的详细信息中传递其ID或电子邮件，以便将购物车连接到客户。\n",
        "operationId": "PostCart",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/complete": {
      "post": {
        "summary": "完成购物车",
        "deprecated": false,
        "description": "完成购物车并根据购物车的类型下订单或创建交换。这包括尝试授权购物车的付款。\n如果授权付款需要更多操作，则购物车将无法完成，订单将不会下发，也不会创建掉期。\n\n如果在头“幂等密钥”中没有提供幂等密钥并将其添加到\n响应。如果在cart完成过程中发生错误或请求因任何原因而中断，则可以通过传递幂等性来重试cart完成\n键。\n",
        "operationId": "PostCartsCartComplete",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Cart ID.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCompleteCartRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/payment-session": {
      "post": {
        "summary": "选择支付会话",
        "deprecated": false,
        "description": "选择将用于完成购物车的支付会话。这通常在客户在结账期间选择其首选付款方式时使用。购物车的总计将重新计算。",
        "operationId": "PostCartsCartPaymentSession",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartsCartPaymentSessionReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/payment-sessions/{provider_id}": {
      "delete": {
        "summary": "删除支付会话",
        "deprecated": false,
        "description": "删除购物车中的支付会话。如果付款失败，这可能会有用。总计将重新计算。",
        "operationId": "DeleteCartsCartPaymentSessionsSession",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "用于创建要删除的支付会话的支付提供程序的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "更新支付会话",
        "deprecated": false,
        "description": "使用其他数据更新支付会话。根据使用的支付提供程序，这可能会有用。之后所有支付会话都将更新，并重新计算购物车总计。",
        "operationId": "PostCartsCartPaymentSessionUpdate",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider_id",
            "in": "path",
            "description": "支付提供程序的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartsCartPaymentSessionUpdateReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}": {
      "get": {
        "summary": "获取购物车",
        "deprecated": false,
        "description": "检索购物车的详细信息。这包括重新计算其总计。",
        "operationId": "GetCartsCart",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "更新购物车",
        "deprecated": false,
        "description": "更新购物车的详细信息。如果购物车具有支付会话并且未更改地区，则支付会话将更新。购物车的总计也 将重新计算。",
        "operationId": "PostCartsCart",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartsCartReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/shipping-methods": {
      "post": {
        "summary": "添加送货方式",
        "deprecated": false,
        "description": "向购物车添加送货方式。`data` 字段的验证由所选送货选项的配送提供程序处理。",
        "operationId": "PostCartsCartShippingMethod",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartsCartShippingMethodReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/line-items/{line_id}": {
      "post": {
        "summary": "更新订单项",
        "deprecated": false,
        "description": "更新订单项的数量。",
        "operationId": "PostCartsCartLineItemsItem",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "line_id",
            "in": "path",
            "description": "订单项的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartsCartLineItemsItemReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "删除订单项",
        "deprecated": false,
        "description": "从购物车中删除订单项。支付会话将更新，总计将重新计算。",
        "operationId": "DeleteCartsCartLineItemsItem",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "line_id",
            "in": "path",
            "description": "订单项的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/line-items": {
      "post": {
        "summary": "添加订单项",
        "deprecated": false,
        "description": "使用给定的产品变体生成订单项并将其添加到购物车",
        "operationId": "PostCartsCartLineItems",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "要添加订单项的购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCartsCartLineItemsReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/taxes": {
      "post": {
        "summary": "计算购物车税费",
        "deprecated": false,
        "description": "计算购物车的税费。如果购物车的地区的 `automatic_taxes` 字段设置为 `false`，则此方法很有用。如果购物车的地区使用除 Medusa 的系统提供程序之外的税费提供程序，则这可能会导致向第三方服务发送请求。",
        "operationId": "PostCartsCartTaxes",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/carts/{id}/discounts/{code}": {
      "delete": {
        "summary": "删除折扣",
        "deprecated": false,
        "description": "从购物车中删除折扣。这只会删除折扣的应用，而不会完全删除它。删除后，总计将重新计算，并且支付会话将刷新。",
        "operationId": "DeleteCartsCartDiscountsDiscount",
        "tags": [
          "Store API/Carts",
          "Carts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "唯一的折扣代码。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/token": {
      "post": {
        "summary": "客户登录 (JWT)",
        "deprecated": false,
        "description": "成功登录后，将返回一个 JWT 令牌以用于后续授权。",
        "operationId": "PostToken",
        "tags": [
          "Store API/Auth",
          "Auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "用户的电子邮件。"
                  },
                  "password": {
                    "type": "string",
                    "description": "用户的密码。"
                  }
                }
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreBearerAuthRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/auth/token": {
      "post": {
        "summary": "客户登录 (JWT)",
        "deprecated": false,
        "description": "成功登录后，将返回一个JWT令牌，该令牌可用于发送经过身份验证的请求。",
        "operationId": "PostToken",
        "tags": [
          "Store API/Auth",
          "Auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostAuthReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreBearerAuthRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/auth/{email}": {
      "get": {
        "summary": "检查电子邮件是否存在",
        "deprecated": false,
        "description": "检查是否已有客户使用提供的电子邮件注册。",
        "operationId": "GetAuthEmail",
        "tags": [
          "Store API/Auth",
          "Auth"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "要检查的电子邮件。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreGetAuthEmailRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/auth": {
      "get": {
        "summary": "获取当前客户",
        "deprecated": false,
        "description": "检索当前登录客户的详细信息。",
        "operationId": "GetAuth",
        "tags": [
          "Store API/Auth",
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreAuthRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "客户登出",
        "deprecated": false,
        "description": "删除当前登录客户的会话。",
        "operationId": "DeleteAuth",
        "tags": [
          "Store API/Auth",
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "客户登录",
        "deprecated": false,
        "description": "让客户登录并在响应标头中包含Cookie会话。cookie会话可以在随后的请求中用于对客户进行身份验证。当使用美杜莎的JS或美杜莎React客户端时，cookie会自动附加到后续请求中。",
        "operationId": "PostAuth",
        "tags": [
          "Store API/Auth",
          "Auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostAuthReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreAuthRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/shipping-options/{cart_id}": {
      "get": {
        "summary": "获取购物车可用物流选项列表",
        "deprecated": false,
        "description": "检索购物车可用的物流选项列表。",
        "operationId": "GetShippingOptionsCartId",
        "tags": [
          "Store API/Shipping Options",
          "Shipping Options"
        ],
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreCartShippingOptionsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/shipping-options": {
      "get": {
        "summary": "获取物流选项",
        "deprecated": false,
        "description": "检索物流选项列表。",
        "operationId": "GetShippingOptions",
        "tags": [
          "Store API/Shipping Options",
          "Shipping Options"
        ],
        "parameters": [
          {
            "name": "is_return",
            "in": "query",
            "description": "Whether return shipping options should be included. By default, all shipping options are returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_ids",
            "in": "query",
            "description": "\"Comma-separated list of Product IDs to filter Shipping Options by. If provided, only shipping options that can be used with the provided products are retrieved.\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region_id",
            "in": "query",
            "description": "\"The ID of the region that the shipping options belong to. If not provided, all shipping options are retrieved.\"",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreShippingOptionsListRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/orders/batch/customer/token": {
      "post": {
        "summary": "声明订单",
        "deprecated": false,
        "description": "允许登录的客户声明一个或多个订单的所有权。这将生成一个令牌，以后可以使用该令牌通过验证订单声明 API 路由来验证声明。这也会发出 `order-update-token.created` 事件。因此，如果您安装了处理此事件并向客户发送通知（例如电子邮件）的通知提供程序，则客户应会收到有关如何完成其声明所有权的说明。",
        "operationId": "PostOrdersCustomerOrderClaim",
        "tags": [
          "Store API/Orders",
          "Orders"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersCustomerOrderClaimReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/orders/customer/confirm": {
      "post": {
        "summary": "验证订单声明",
        "deprecated": false,
        "description": "验证在客户请求订单所有权时提供给客户的索赔订单令牌。",
        "operationId": "PostOrdersCustomerOrderClaimsCustomerOrderClaimAccept",
        "tags": [
          "Store API/Orders",
          "Orders"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostCustomersCustomerAcceptClaimReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/orders/{id}": {
      "get": {
        "summary": "获取订单",
        "deprecated": false,
        "description": "检索订单的详细信息。",
        "operationId": "GetOrdersOrder",
        "tags": [
          "Store API/Orders",
          "Orders"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "订单的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应在返回的订单中扩展的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Comma-separated relations that should be included in the returned order.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreOrdersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/orders": {
      "get": {
        "summary": "查找订单",
        "deprecated": false,
        "description": "使用过滤器查找订单。如果过滤器没有将结果缩小到单个订单，则返回 404 响应，表示没有订单。",
        "operationId": "GetOrders",
        "tags": [
          "Store API/Orders",
          "Orders"
        ],
        "parameters": [
          {
            "name": "display_id",
            "in": "query",
            "description": "按 ID 过滤。",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "应在返回的订单中扩展的逗号分隔字段。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "应在返回的订单中扩展的逗号分隔关系。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "按电子邮件过滤。",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postal_code",
            "in": "query",
            "description": "送货地址的邮政编码",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreOrdersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/orders/cart/{cart_id}": {
      "get": {
        "summary": "按购物车 ID 获取",
        "deprecated": false,
        "description": "按用于创建订单的购物车的 ID 检索订单的详细信息。",
        "operationId": "GetOrdersOrderCartId",
        "tags": [
          "Store API/Orders",
          "Orders"
        ],
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "购物车的 ID。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreOrdersRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/swaps/{cart_id}": {
      "get": {
        "summary": "按购物车ID获取",
        "deprecated": false,
        "description": "按其购物车的 ID 检索 Swap 的详细信息。",
        "operationId": "GetSwapsSwapCartId",
        "tags": [
          "Store API/Swaps",
          "Swaps"
        ],
        "parameters": [
          {
            "name": "cart_id",
            "in": "path",
            "description": "购物车的 ID",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreSwapsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "2": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "3": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "9": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/swaps": {
      "post": {
        "summary": "创建交换",
        "deprecated": false,
        "description": "为订单创建交换。这也将创建一个返回，并将其与交换相关联。如果指定了退货运输选项，退货将自动完成。\n要完成交换，您必须使用complete Cart API Route将交换购物车的ID传递给它。\n\n如果在头“幂等密钥”中没有提供幂等密钥并将其添加到\n响应。如果在交换创建过程中发生错误或请求因任何原因而中断，则可以通过传递幂等性来重试交换创建\n键。",
        "operationId": "PostSwaps",
        "tags": [
          "Store API/Swaps",
          "Swaps"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorePostSwapsReq"
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreSwapsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  },
                  "2": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "3": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "8": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "9": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "10": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/gift-cards/{code}": {
      "get": {
        "summary": "按代码获取礼品卡",
        "deprecated": false,
        "description": "按其关联的唯一代码检索礼品卡的详细信息。",
        "operationId": "GetGiftCardsCode",
        "tags": [
          "Store API/Gift Cards",
          "Gift Cards"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "唯一的礼品卡代码。",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreGiftCardsRes"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "$ref": "#/components/schemas/MultipleErrors"
                    }
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "不允许的错误",
                    "value": {
                      "message": "Discount must be set to dynamic",
                      "type": "not_allowed"
                    }
                  },
                  "2": {
                    "summary": "无效数据错误",
                    "value": {
                      "message": "first_name must be a string",
                      "type": "invalid_data"
                    }
                  },
                  "3": {
                    "summary": "多个错误",
                    "value": {
                      "message": "Provided request body contains errors. Please check the data and retry the request",
                      "errors": [
                        {
                          "message": "first_name must be a string",
                          "type": "invalid_data"
                        },
                        {
                          "message": "Discount must be set to dynamic",
                          "type": "not_allowed"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Entity with id 1 was not found",
                  "type": "not_found"
                }
              }
            },
            "headers": {}
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "unknown_error",
                  "message": "The request conflicted with another request. You may retry the request with the provided Idempotency-Key.",
                  "type": "QueryRunnerAlreadyReleasedError"
                }
              }
            },
            "headers": {}
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "code": "invalid_request_error",
                  "message": "Discount with code TEST already exists.",
                  "type": "duplicate_error"
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "7": {
                    "summary": "数据库错误",
                    "value": {
                      "code": "api_error",
                      "message": "An error occured while hashing password",
                      "type": "database_error"
                    }
                  },
                  "8": {
                    "summary": "无效参数错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  },
                  "9": {
                    "summary": "默认错误",
                    "value": {
                      "code": "unknown_error",
                      "message": "An unknown error occurred.",
                      "type": "unknown_error"
                    }
                  },
                  "10": {
                    "summary": "意外状态错误",
                    "value": {
                      "message": "cart.total must be defined",
                      "type": "unexpected_state"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "summary": "上传宠物图片",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string"
                  },
                  "file": {
                    "description": "file to upload",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseSuccess"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pet/findByTags": {
      "get": {
        "summary": "根据 tag 查找宠物列表",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "查询用户信息",
        "deprecated": false,
        "description": "获取单个用户的个人资料信息，仅已登录用户可查询。",
        "tags": [
          "v1.0",
          "宠物"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "example": "5",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "类型",
            "required": false,
            "example": "normal",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "名称",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "状态",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "data",
                    "success"
                  ]
                },
                "example": {
                  "data": {
                    "createdAt": "2005-02-24 01:35:36",
                    "gender": "男",
                    "age": 45,
                    "birthday": "2010-07-15",
                    "registerIp": "179.50.144.104",
                    "isVip": true,
                    "avatar": "http://dummyimage.com/100x100",
                    "city": "厦门市",
                    "username": "邱军",
                    "phone": "18687866771",
                    "id": 27,
                    "status": "disabled",
                    "email": "l.ototlo@qq.com"
                  },
                  "success": true
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "errorCode": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "success",
                    "errorCode"
                  ]
                },
                "example": {
                  "success": false,
                  "errorCode": 404001
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "summary": "修改用户信息",
        "deprecated": false,
        "description": "修改用户资料，仅可修改本人资料，不可修改他人资料。",
        "tags": [
          "v1.0"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "createdAt": "1984-06-23 17:10:27",
                "sex": "女",
                "age": 79,
                "birthday": "2020-08-07",
                "registerIp": "111.140.153.136",
                "isVip": false,
                "avatar": "http://dummyimage.com/100x100",
                "id": 71,
                "username": "戴军",
                "phone": "18679812225",
                "email": "u.quppppcff@qq.com",
                "status": "disabled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "data",
                    "success"
                  ]
                },
                "example": {
                  "data": {
                    "createdAt": "2004-07-11 09:02:56",
                    "sex": "男",
                    "age": 53,
                    "birthday": "2008-07-07",
                    "registerIp": "231.80.173.25",
                    "isVip": false,
                    "avatar": "http://dummyimage.com/100x100",
                    "id": 64,
                    "status": "normal",
                    "phone": "18692765225",
                    "username": "夏勇",
                    "email": "o.rjgse@qq.com"
                  },
                  "success": true
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "errorCode": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "success",
                    "errorCode"
                  ]
                },
                "example": {
                  "success": false,
                  "errorCode": 404001
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "删除用户",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users": {
      "get": {
        "summary": "获取用户列表",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "用户列表",
            "headers": {}
          },
          "401": {
            "description": "未授权",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "summary": "创建新用户",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "201": {
            "description": "用户创建成功",
            "headers": {}
          },
          "401": {
            "description": "未授权",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/user/login": {
      "post": {
        "summary": "登录",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "用户名",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "密码",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "token"
                  ]
                },
                "example": {
                  "token": "98weut03ti340h9gj390gh0934h0394hgj3904h"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/user/register": {
      "post": {
        "summary": "注册",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/user/logout": {
      "get": {
        "summary": "退出登录",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/v12/users/{id}": {
      "get": {
        "summary": "用户详情",
        "deprecated": false,
        "description": "",
        "tags": [
          "v1.0"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "data",
                    "success"
                  ]
                },
                "example": {
                  "data": {
                    "createdAt": "1989-09-07 10:23:24",
                    "age": 32,
                    "birthday": "1977-07-25",
                    "registerIp": "242.176.7.253",
                    "isVip": true,
                    "avatar": "http://dummyimage.com/100x100",
                    "city": "海南藏族自治州",
                    "img": "http://dummyimage.com/400x400",
                    "gender": "男",
                    "id": 90,
                    "username": "邵勇",
                    "phone": "18185658174",
                    "email": "b.xslusstqb@qq.com",
                    "status": "normal"
                  },
                  "success": false
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/addToCart": {
      "post": {
        "summary": "加入购物车",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID 编号"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/order": {
      "post": {
        "summary": "下单购买宠物",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ordertime": {
                    "type": "string"
                  },
                  "userid": {
                    "type": "string"
                  },
                  "cart": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": [
                  "ordertime",
                  "userid",
                  "cart"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pay/{orderId}": {
      "post": {
        "summary": "支付订单",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderid": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "description": "状态"
                    }
                  },
                  "required": [
                    "orderid",
                    "status"
                  ]
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/pet": {
      "post": {
        "summary": "新建宠物信息",
        "deprecated": false,
        "description": "",
        "tags": [
          "宠物"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "title": "宠物名"
                  },
                  "category": {
                    "type": "string"
                  },
                  "birthday": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "category",
                  "birthday"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "get": {
        "summary": "获取一个宠物",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功返回宠物对象（可能是猫、狗、蛇）",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "summary": "查询订单详情",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      },
      "delete": {
        "summary": "删除订单",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/store/inventory": {
      "get": {
        "summary": "根据状态查询宠物库存数",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/crypto-js": {
      "get": {
        "summary": "加密解密",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/aa": {
      "get": {
        "summary": "A&B",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "b1": {
                    "type": "string"
                  },
                  "b2": {
                    "type": "string"
                  }
                },
                "required": [
                  "b1",
                  "b2"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/bb": {
      "get": {
        "summary": "oneOf",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oneOf"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/m1/4997831-4656773-default/pet/1": {
      "get": {
        "summary": "宠物",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "createTime": {
                      "type": "string"
                    },
                    "location": {
                      "type": "object",
                      "properties": {
                        "province": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "district": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "province",
                        "city",
                        "district"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "category",
                    "name",
                    "photoUrls",
                    "tags",
                    "status",
                    "createTime",
                    "location"
                  ]
                },
                "example": {
                  "id": 64,
                  "category": {
                    "id": 62,
                    "name": "豆治涛"
                  },
                  "name": "宝家豪",
                  "photoUrls": [
                    "https://loremflickr.com/400/400?lock=8218414420023114",
                    "https://loremflickr.com/400/400?lock=6447669026823353",
                    "https://loremflickr.com/400/400?lock=7792390500201091"
                  ],
                  "tags": [
                    {
                      "id": 39,
                      "name": "贺馨羽"
                    }
                  ],
                  "status": "available",
                  "createTime": "2025-06-23 05:08:56",
                  "location": {
                    "province": "内蒙古自治区",
                    "city": "包徽市",
                    "district": "未央区"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/m1/4997831-4656773-default/pet/{id}": {
      "get": {
        "summary": "11",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string",
              "enum": [
                "A",
                "B"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "param": {
                    "type": "string"
                  }
                },
                "required": [
                  "param"
                ]
              },
              "examples": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "category": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "createTime": {
                      "type": "string"
                    },
                    "location": {
                      "type": "object",
                      "properties": {
                        "province": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "district": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "province",
                        "city",
                        "district"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "category",
                    "name",
                    "photoUrls",
                    "tags",
                    "status",
                    "createTime",
                    "location"
                  ]
                },
                "example": {
                  "id": 41,
                  "category": {
                    "id": 4,
                    "name": "拉强"
                  },
                  "name": "蒲桂英",
                  "photoUrls": [
                    "https://loremflickr.com/400/400?lock=6635514753359677"
                  ],
                  "tags": [
                    {
                      "id": 26,
                      "name": "粘超"
                    },
                    {
                      "id": 62,
                      "name": "剑斌"
                    }
                  ],
                  "status": "available",
                  "createTime": "2026-02-09 01:08:59",
                  "location": {
                    "province": "北京市",
                    "city": "宁门市",
                    "district": "九原区"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/python": {
      "get": {
        "summary": "调用外部程序",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/public": {
      "get": {
        "summary": "公开接口，无需认证",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功响应",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/admin": {
      "get": {
        "summary": "管理员接口",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "管理员接口访问成功",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/admin/users": {
      "get": {
        "summary": "管理员获取全部用户详细信息",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "用户详细列表",
            "headers": {}
          },
          "401": {
            "description": "未授权",
            "headers": {}
          },
          "403": {
            "description": "权限不足",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/metrics": {
      "get": {
        "summary": "获取系统指标",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "系统指标数据",
            "headers": {}
          },
          "401": {
            "description": "未授权",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/test": {
      "get": {
        "summary": "未命名接口",
        "deprecated": false,
        "description": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "openapi": "3.0.3",
              "info": {
                "title": "Pet Store API",
                "version": "1.0.0"
              },
              "paths": {
                "/pet": {
                  "get": {
                    "summary": "获取一个宠物",
                    "responses": {
                      "200": {
                        "description": "成功返回宠物对象（可能是猫、狗、蛇）",
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "components": {
                "schemas": {
                  "Pet": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Dog"
                      },
                      {
                        "$ref": "#/components/schemas/Cat"
                      },
                      {
                        "$ref": "#/components/schemas/Snake"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "dog": "#/components/schemas/Dog",
                        "cat": "#/components/schemas/Cat",
                        "snake": "#/components/schemas/Snake"
                      }
                    }
                  },
                  "Dog": {
                    "type": "object",
                    "required": [
                      "petType",
                      "breed"
                    ],
                    "properties": {
                      "petType": {
                        "type": "string",
                        "enum": [
                          "dog"
                        ]
                      },
                      "breed": {
                        "type": "string",
                        "description": "狗的品种",
                        "example": "Husky"
                      }
                    }
                  },
                  "Cat": {
                    "type": "object",
                    "required": [
                      "petType",
                      "huntingSkill"
                    ],
                    "properties": {
                      "petType": {
                        "type": "string",
                        "enum": [
                          "cat"
                        ]
                      },
                      "huntingSkill": {
                        "type": "string",
                        "description": "捕猎技巧",
                        "example": "stealth"
                      }
                    }
                  },
                  "Snake": {
                    "type": "object",
                    "required": [
                      "petType",
                      "isVenomous"
                    ],
                    "properties": {
                      "petType": {
                        "type": "string",
                        "enum": [
                          "snake"
                        ]
                      },
                      "isVenomous": {
                        "type": "boolean",
                        "description": "是否有毒",
                        "example": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "openapi": "3.0.3",
                "info": {
                  "title": "Pet Store API",
                  "version": "1.0.0"
                },
                "paths": {
                  "/pet": {
                    "get": {
                      "summary": "获取一个宠物",
                      "responses": {
                        "200": {
                          "description": "成功返回宠物对象（可能是猫、狗、蛇）",
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "components": {
                  "schemas": {
                    "Pet": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Dog"
                        },
                        {
                          "$ref": "#/components/schemas/Cat"
                        },
                        {
                          "$ref": "#/components/schemas/Snake"
                        }
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "dog": "#/components/schemas/Dog",
                          "cat": "#/components/schemas/Cat",
                          "snake": "#/components/schemas/Snake"
                        }
                      }
                    },
                    "Dog": {
                      "type": "object",
                      "required": [
                        "petType",
                        "breed"
                      ],
                      "properties": {
                        "petType": {
                          "type": "string",
                          "enum": [
                            "dog"
                          ]
                        },
                        "breed": {
                          "type": "string",
                          "description": "狗的品种",
                          "example": "Husky"
                        }
                      }
                    },
                    "Cat": {
                      "type": "object",
                      "required": [
                        "petType",
                        "huntingSkill"
                      ],
                      "properties": {
                        "petType": {
                          "type": "string",
                          "enum": [
                            "cat"
                          ]
                        },
                        "huntingSkill": {
                          "type": "string",
                          "description": "捕猎技巧",
                          "example": "stealth"
                        }
                      }
                    },
                    "Snake": {
                      "type": "object",
                      "required": [
                        "petType",
                        "isVenomous"
                      ],
                      "properties": {
                        "petType": {
                          "type": "string",
                          "enum": [
                            "snake"
                          ]
                        },
                        "isVenomous": {
                          "type": "boolean",
                          "description": "是否有毒",
                          "example": true
                        }
                      }
                    }
                  }
                },
                "type": "string"
              },
              "examples": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "enum": [
                    [
                      1,
                      2
                    ],
                    [
                      3,
                      4
                    ]
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "StoreReturnsRes": {
        "type": "object",
        "description": "退货的详细信息。",
        "required": [
          "return"
        ],
        "x-expanded-relations": {
          "field": "return",
          "relations": [
            "items",
            "items.reason"
          ],
          "eager": [
            "items"
          ]
        },
        "properties": {
          "return": {
            "$ref": "#/components/schemas/Return"
          }
        }
      },
      "Pet": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Dog"
          },
          {
            "$ref": "#/components/schemas/Cat"
          },
          {
            "$ref": "#/components/schemas/Snake"
          }
        ],
        "discriminator": {
          "propertyName": "petType",
          "mapping": {
            "dog": "#/components/schemas/Dog",
            "cat": "#/components/schemas/Cat",
            "snake": "#/components/schemas/Snake"
          }
        }
      },
      "Snake": {
        "type": "object",
        "required": [
          "petType",
          "isVenomous"
        ],
        "properties": {
          "petType": {
            "type": "string",
            "enum": [
              "snake"
            ]
          },
          "isVenomous": {
            "type": "boolean",
            "description": "是否有毒",
            "examples": [
              true
            ]
          }
        }
      },
      "Cat": {
        "type": "object",
        "required": [
          "petType",
          "huntingSkill"
        ],
        "properties": {
          "petType": {
            "type": "string",
            "enum": [
              "cat"
            ]
          },
          "huntingSkill": {
            "type": "string",
            "description": "捕猎技巧",
            "examples": [
              "stealth"
            ]
          }
        }
      },
      "Dog": {
        "type": "object",
        "required": [
          "petType",
          "breed"
        ],
        "properties": {
          "petType": {
            "type": "string",
            "enum": [
              "dog"
            ]
          },
          "breed": {
            "type": "string",
            "description": "狗的品种",
            "examples": [
              "Husky"
            ]
          }
        }
      },
      "Return": {
        "title": "Return",
        "description": "退货包含有关客户希望退回的订单项的信息，以及如何退回这些商品。退货也可以用作交换或索赔的一部分。",
        "type": "object",
        "required": [
          "claim_order_id",
          "created_at",
          "id",
          "idempotency_key",
          "location_id",
          "metadata",
          "no_notification",
          "order_id",
          "received_at",
          "refund_amount",
          "shipping_data",
          "status",
          "swap_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "退货的 ID",
            "type": "string",
            "examples": [
              "ret_01F0YET7XPCMF8RZ0Y151NZV2V"
            ]
          },
          "swap_id": {
            "description": "退货可能所属的交换的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "swap": {
            "description": "退货可能所属的交换的详细信息。",
            "x-expandable": "swap",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "claim_order_id": {
            "description": "退货可能所属的索赔的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "claim_order": {
            "description": "退货可能所属的索赔的详细信息。",
            "x-expandable": "claim_order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "order_id": {
            "description": "为其创建退货的订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "order": {
            "description": "为其创建退货的订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "location_id": {
            "description": "退货将添加回的库存地点的 ID。",
            "type": "string",
            "examples": [
              "sloc_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "refund_amount": {
            "description": "由于退货应退款的金额。",
            "type": "integer",
            "examples": [
              1000
            ]
          },
          "no_notification": {
            "description": "设置为 true 时，不会发送与此退货相关的通知。",
            "type": "boolean",
            "examples": [
              false
            ],
            "nullable": true
          },
          "received_at": {
            "description": "收到退货的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "退货状态。",
            "type": "string",
            "default": "requested",
            "enum": [
              "requested",
              "received",
              "requires_action",
              "canceled"
            ]
          },
          "shipping_data": {
            "description": "有关退货发货的数据，由处理退货发货的配送提供商提供。",
            "type": "object",
            "examples": [
              {}
            ],
            "properties": {},
            "nullable": true
          },
          "idempotency_key": {
            "description": "随机生成的密钥，用于在发生故障时继续完成退货。",
            "type": "string",
            "externalDocs": {
              "url": "https://docs.medusajs.com/development/idempotency-key/overview.md",
              "description": "了解有关如何使用幂等性密钥的更多信息。"
            },
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "shipping_method": {
            "type": "object",
            "properties": {}
          },
          "items": {
            "description": "客户退回的商品的详细信息。",
            "type": "array",
            "x-expandable": "items",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "ReturnItem": {
        "title": "Return Item",
        "description": "退货商品表示订单中要退回的订单项。它包括与退货相关的详细信息及其背后的原因。",
        "type": "object",
        "required": [
          "is_requested",
          "item_id",
          "metadata",
          "note",
          "quantity",
          "reason_id",
          "received_quantity",
          "requested_quantity",
          "return_id"
        ],
        "properties": {
          "return_id": {
            "description": "退货商品所属的退货的 ID。",
            "type": "string",
            "examples": [
              "ret_01F0YET7XPCMF8RZ0Y151NZV2V"
            ]
          },
          "item_id": {
            "description": "退货商品引用的订单项的 ID。",
            "type": "string",
            "examples": [
              "item_01G8ZC9GWT6B2GP5FSXRXNFNGN"
            ]
          },
          "return_order": {
            "description": "退货商品所属的退货的详细信息。",
            "x-expandable": "return_order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "quantity": {
            "description": "要退回的订单项的数量。",
            "type": "integer",
            "examples": [
              1
            ]
          },
          "is_requested": {
            "description": "退货商品最初是否被请求或在仓库中意外收到。",
            "type": "boolean",
            "default": true
          },
          "requested_quantity": {
            "description": "最初请求退回的数量。",
            "type": "integer",
            "examples": [
              1
            ],
            "nullable": true
          },
          "received_quantity": {
            "description": "在仓库中收到的数量。",
            "type": "integer",
            "examples": [
              1
            ],
            "nullable": true
          },
          "reason_id": {
            "description": "退回商品的原因的 ID。",
            "type": "string",
            "examples": [
              "rr_01G8X82GCCV2KSQHDBHSSAH5TQ"
            ],
            "nullable": true
          },
          "note": {
            "description": "包含有关退货的其他详细信息的可选注释。",
            "type": "string",
            "examples": [
              "I didn't like it."
            ],
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "reason": {
            "type": "object",
            "properties": {}
          },
          "item": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "StoreOrderEditsRes": {
        "type": "object",
        "description": "订单编辑的详细信息。",
        "required": [
          "order_edit"
        ],
        "x-expanded-relations": {
          "field": "order_edit",
          "relations": [
            "changes",
            "changes.line_item",
            "changes.line_item.variant",
            "changes.original_line_item",
            "changes.original_line_item.variant",
            "items",
            "items.adjustments",
            "items.tax_lines",
            "items.variant",
            "payment_collection"
          ],
          "implicit": [
            "items",
            "items.tax_lines",
            "items.adjustments",
            "items.variant"
          ],
          "totals": [
            "difference_due",
            "discount_total",
            "gift_card_tax_total",
            "gift_card_total",
            "shipping_total",
            "subtotal",
            "tax_total",
            "total",
            "items.discount_total",
            "items.gift_card_total",
            "items.original_tax_total",
            "items.original_total",
            "items.refundable",
            "items.subtotal",
            "items.tax_total",
            "items.total"
          ]
        },
        "properties": {
          "order_edit": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "OrderEdit": {
        "title": "Order Edit",
        "description": "订单编辑允许修改订单中的商品，例如从原始订单中添加、更新或删除商品。确认订单编辑后，更改将反映在原始订单上。",
        "type": "object",
        "required": [
          "canceled_at",
          "canceled_by",
          "confirmed_by",
          "confirmed_at",
          "created_at",
          "created_by",
          "declined_at",
          "declined_by",
          "declined_reason",
          "id",
          "internal_note",
          "order_id",
          "payment_collection_id",
          "requested_at",
          "requested_by",
          "status",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "订单编辑的 ID",
            "type": "string",
            "examples": [
              "oe_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ]
          },
          "order_id": {
            "description": "正在编辑的订单的 ID",
            "type": "string",
            "examples": [
              "order_01G2SG30J8C85S4A5CHM2S1NS2"
            ]
          },
          "order": {
            "description": "为其创建此订单编辑的订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "internal_note": {
            "description": "包含有关订单编辑的其他详细信息的可选注释。",
            "type": "string",
            "examples": [
              "Included two more items B to the order."
            ],
            "nullable": true
          },
          "created_by": {
            "description": "创建订单编辑的用户或客户的唯一标识符。",
            "type": "string"
          },
          "requested_by": {
            "description": "请求订单编辑的用户或客户的唯一标识符。",
            "type": "string",
            "nullable": true
          },
          "requested_at": {
            "description": "请求编辑的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "confirmed_by": {
            "description": "确认订单编辑的用户或客户的唯一标识符。",
            "type": "string",
            "nullable": true
          },
          "confirmed_at": {
            "description": "确认编辑的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "declined_by": {
            "description": "拒绝订单编辑的用户或客户的唯一标识符。",
            "type": "string",
            "nullable": true
          },
          "declined_at": {
            "description": "拒绝编辑的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "declined_reason": {
            "description": "拒绝订单编辑的可选注释。",
            "type": "string",
            "nullable": true
          },
          "canceled_by": {
            "description": "取消订单编辑的用户或客户的唯一标识符。",
            "type": "string",
            "nullable": true
          },
          "canceled_at": {
            "description": "取消编辑的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "subtotal": {
            "description": "小计总额",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "discount_total": {
            "description": "折扣总额",
            "type": "integer",
            "examples": [
              800
            ]
          },
          "shipping_total": {
            "description": "运费总额",
            "type": "integer",
            "examples": [
              800
            ]
          },
          "gift_card_total": {
            "description": "礼品卡总额",
            "type": "integer",
            "examples": [
              800
            ]
          },
          "gift_card_tax_total": {
            "description": "礼品卡税总额",
            "type": "integer",
            "examples": [
              800
            ]
          },
          "tax_total": {
            "description": "税总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "total": {
            "description": "编辑后订单的总金额。",
            "type": "integer",
            "examples": [
              8200
            ]
          },
          "difference_due": {
            "description": "订单总金额与编辑后订单总金额之间的差额。",
            "type": "integer",
            "examples": [
              8200
            ]
          },
          "payment_collection_id": {
            "description": "付款集合的ID",
            "type": "string",
            "examples": [
              "paycol_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "订单编辑的状态。",
            "type": "string",
            "enum": [
              "confirmed",
              "declined",
              "requested",
              "created",
              "canceled"
            ]
          },
          "items": {
            "description": "从原始订单克隆的商品的详细信息，以及新的更改。确认订单编辑后，这些订单项将与原始订单关联。",
            "type": "array",
            "x-expandable": "items",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          },
          "changes": {
            "description": "原始订单的订单项的所有更改的详细信息。",
            "x-expandable": "changes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemChange"
            }
          },
          "payment_collection": {
            "$ref": "#/components/schemas/PaymentCollection"
          }
        }
      },
      "OrderItemChange": {
        "title": "Order Item Change",
        "description": "订单项更改是在订单编辑中对订单商品所做的更改。在确认订单编辑之前，这些更改不会反映在原始订单上。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "line_item_id",
          "order_edit_id",
          "original_line_item_id",
          "type",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "订单项更改的 ID",
            "type": "string",
            "examples": [
              "oic_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ]
          },
          "order_edit_id": {
            "description": "订单编辑的 ID",
            "type": "string",
            "examples": [
              "oe_01G2SG30J8C85S4A5CHM2S1NS2"
            ]
          },
          "order_edit": {
            "description": "与商品更改关联的订单编辑的详细信息。",
            "x-expandable": "order_edit",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "original_line_item_id": {
            "description": "订单中原始订单项的 ID",
            "type": "string",
            "examples": [
              "item_01G8ZC9GWT6B2GP5FSXRXNFNGN"
            ],
            "nullable": true
          },
          "line_item_id": {
            "description": "克隆的订单项的 ID。",
            "type": "string",
            "examples": [
              "item_01G8ZC9GWT6B2GP5FSXRXNFNGN"
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "订单项更改的状态",
            "type": "string",
            "enum": [
              "item_add",
              "item_remove",
              "item_update"
            ]
          },
          "original_line_item": {
            "$ref": "#/components/schemas/LineItem"
          },
          "line_item": {
            "$ref": "#/components/schemas/LineItem"
          }
        }
      },
      "StorePaymentCollectionsRes": {
        "type": "object",
        "description": "付款集合的详细信息。",
        "required": [
          "payment_collection"
        ],
        "x-expanded-relations": {
          "field": "payment_collection",
          "relations": [
            "payment_sessions",
            "region"
          ],
          "eager": [
            "region.fulfillment_providers",
            "region.payment_providers"
          ]
        },
        "properties": {
          "payment_collection": {
            "$ref": "#/components/schemas/PaymentCollection"
          }
        }
      },
      "PaymentCollection": {
        "title": "Payment Collection",
        "description": "付款集合允许对付款列表进行分组和管理。在为订单编辑进行额外付款或集成分期付款时，这可能会有所帮助。",
        "type": "object",
        "required": [
          "amount",
          "authorized_amount",
          "created_at",
          "created_by",
          "currency_code",
          "deleted_at",
          "description",
          "id",
          "metadata",
          "region_id",
          "status",
          "type",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "付款集合的ID",
            "type": "string",
            "examples": [
              "paycol_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ]
          },
          "description": {
            "description": "付款集合的描述",
            "type": "string",
            "nullable": true
          },
          "amount": {
            "description": "付款集合的金额。",
            "type": "integer"
          },
          "authorized_amount": {
            "description": "付款集合的授权金额。",
            "type": "integer",
            "nullable": true
          },
          "region_id": {
            "description": "此付款集合关联的地区的 ID。",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ]
          },
          "created_by": {
            "description": "创建付款集合的用户的 ID。",
            "type": "string"
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "付款集合的类型",
            "type": "string",
            "enum": [
              "order_edit"
            ]
          },
          "status": {
            "description": "付款集合的类型",
            "type": "string",
            "enum": [
              "not_paid",
              "awaiting",
              "authorized",
              "partially_authorized",
              "canceled"
            ]
          },
          "currency_code": {
            "description": "此付款集合关联的货币的三个字符 ISO 代码。",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
              "description": "查看代码列表。"
            },
            "examples": [
              "usd"
            ]
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "payments": {
            "description": "作为付款集合的一部分创建的付款的详细信息。",
            "type": "array",
            "x-expandable": "payments",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "payment_sessions": {
            "description": "作为付款集合的一部分创建的支付会话的详细信息。",
            "type": "array",
            "x-expandable": "payment_sessions",
            "items": {
              "$ref": "#/components/schemas/PaymentSession"
            }
          }
        }
      },
      "StorePaymentCollectionsSessionRes": {
        "type": "object",
        "required": [
          "payment_session"
        ],
        "properties": {
          "payment_session": {
            "$ref": "#/components/schemas/PaymentSession"
          }
        }
      },
      "PaymentSession": {
        "title": "Payment Session",
        "description": "A Payment Session is created when a Customer initilizes the checkout flow, and can be used to hold the state of a payment flow. Each Payment Session is controlled by a Payment Provider, which is responsible for the communication with external payment services. Authorized Payment Sessions will eventually get promoted to Payments to indicate that they are authorized for payment processing such as capture or refund. Payment sessions can also be used as part of payment collections.",
        "type": "object",
        "required": [
          "amount",
          "cart_id",
          "created_at",
          "data",
          "id",
          "is_initiated",
          "is_selected",
          "idempotency_key",
          "payment_authorized_at",
          "provider_id",
          "status",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "支付会话的 ID",
            "type": "string",
            "examples": [
              "ps_01G901XNSRM2YS3ASN9H5KG3FZ"
            ]
          },
          "cart_id": {
            "description": "为其创建支付会话的购物车的 ID。",
            "type": "string",
            "examples": [
              "cart_01G8ZH853Y6TFXWPG5EYE81X63"
            ],
            "nullable": true
          },
          "provider_id": {
            "description": "负责支付会话的支付提供程序的 ID",
            "type": "string",
            "examples": [
              "manual"
            ]
          },
          "is_selected": {
            "description": "一个标志，指示支付会话是否已被选为将用于完成购买的方法。",
            "type": "boolean",
            "examples": [
              true
            ],
            "nullable": true
          },
          "is_initiated": {
            "description": "一个标志，指示是否已启动与第三方提供程序的通信。",
            "type": "boolean",
            "default": false,
            "examples": [
              true
            ]
          },
          "amount": {
            "description": "支付会话已授权的金额。",
            "type": "integer",
            "examples": [
              100
            ],
            "nullable": true
          },
          "payment_authorized_at": {
            "description": "支付会话获得授权的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "指示支付会话的状态。默认为 `pending`，最终将变为 `authorized`。支付会话可能具有 `requires_more` 的状态，以指示客户要完成进一步的操作。",
            "type": "string",
            "enum": [
              "authorized",
              "pending",
              "requires_more",
              "error",
              "canceled"
            ],
            "examples": [
              "pending"
            ]
          },
          "data": {
            "description": "支付提供程序识别、修改和处理支付会话所需的数据。通常，这将是一个保存外部支付会话 ID 的对象，但如果支付提供程序不保存任何状态，则可以为空对象。",
            "type": "object",
            "examples": [
              {}
            ],
            "properties": {}
          },
          "idempotency_key": {
            "description": "随机生成的密钥，用于在发生故障时继续完成购物车。",
            "type": "string",
            "externalDocs": {
              "url": "https://docs.medusajs.com/development/idempotency-key/overview.md",
              "description": "了解有关如何使用幂等性密钥的更多信息。"
            },
            "nullable": true
          },
          "cart": {
            "$ref": "#/components/schemas/Cart"
          }
        }
      },
      "StoreCompleteCartRes": {
        "type": "object",
        "description": "如果购物车成功完成，这将包含已创建的订单或交换的详细信息，具体取决于购物车的类型。否则，它将是购物车的详细信息。",
        "required": [
          "type",
          "data"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the data property. If the cart completion fails, type will be `cart` and the data object will be the cart's details. If the cart completion is successful and the cart is used for checkout, type will be `order` and the data object will be the order's details. If the cart completion is successful and the cart is used for swap creation, type will be `swap` and the data object will be the swap's details.",
            "enum": [
              "order",
              "cart",
              "swap"
            ]
          },
          "data": {
            "description": "结果对象的数据。其类型取决于 type 字段。",
            "oneOf": [
              {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/Order"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/Cart"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/Swap"
                  }
                ]
              }
            ]
          }
        }
      },
      "StoreOrdersRes": {
        "type": "object",
        "description": "订单的详细信息。",
        "required": [
          "order"
        ],
        "x-expanded-relations": {
          "field": "order",
          "relations": [
            "customer",
            "discounts",
            "discounts.rule",
            "fulfillments",
            "fulfillments.tracking_links",
            "items",
            "items.variant",
            "payments",
            "region",
            "shipping_address",
            "shipping_methods"
          ],
          "eager": [
            "fulfillments.items",
            "region.fulfillment_providers",
            "region.payment_providers",
            "shipping_methods.shipping_option"
          ],
          "implicit": [
            "claims",
            "claims.additional_items",
            "claims.additional_items.adjustments",
            "claims.additional_items.refundable",
            "claims.additional_items.tax_lines",
            "discounts",
            "discounts.rule",
            "gift_card_transactions",
            "gift_card_transactions.gift_card",
            "gift_cards",
            "items",
            "items.adjustments",
            "items.refundable",
            "items.tax_lines",
            "items.variant",
            "items.variant.product",
            "items.variant.product.profiles",
            "refunds",
            "region",
            "shipping_methods",
            "shipping_methods.tax_lines",
            "swaps",
            "swaps.additional_items",
            "swaps.additional_items.adjustments",
            "swaps.additional_items.refundable",
            "swaps.additional_items.tax_lines"
          ],
          "totals": [
            "discount_total",
            "gift_card_tax_total",
            "gift_card_total",
            "paid_total",
            "refundable_amount",
            "refunded_total",
            "shipping_total",
            "subtotal",
            "tax_total",
            "total",
            "claims.additional_items.discount_total",
            "claims.additional_items.gift_card_total",
            "claims.additional_items.original_tax_total",
            "claims.additional_items.original_total",
            "claims.additional_items.refundable",
            "claims.additional_items.subtotal",
            "claims.additional_items.tax_total",
            "claims.additional_items.total",
            "items.discount_total",
            "items.gift_card_total",
            "items.original_tax_total",
            "items.original_total",
            "items.refundable",
            "items.subtotal",
            "items.tax_total",
            "items.total",
            "swaps.additional_items.discount_total",
            "swaps.additional_items.gift_card_total",
            "swaps.additional_items.original_tax_total",
            "swaps.additional_items.original_total",
            "swaps.additional_items.refundable",
            "swaps.additional_items.subtotal",
            "swaps.additional_items.tax_total",
            "swaps.additional_items.total"
          ]
        },
        "properties": {
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        }
      },
      "StoreCustomersListOrdersRes": {
        "type": "object",
        "description": "客户订单列表，包含分页字段。",
        "required": [
          "orders",
          "count",
          "offset",
          "limit"
        ],
        "x-expanded-relations": {
          "field": "orders",
          "relations": [
            "customer",
            "discounts",
            "discounts.rule",
            "fulfillments",
            "fulfillments.tracking_links",
            "items",
            "items.variant",
            "payments",
            "region",
            "shipping_address",
            "shipping_methods"
          ],
          "eager": [
            "region.fulfillment_providers",
            "region.payment_providers",
            "shipping_methods.shipping_option"
          ],
          "implicit": [
            "claims",
            "claims.additional_items",
            "claims.additional_items.adjustments",
            "claims.additional_items.refundable",
            "claims.additional_items.tax_lines",
            "customer",
            "discounts",
            "discounts.rule",
            "gift_card_transactions",
            "gift_card_transactions.gift_card",
            "gift_cards",
            "items",
            "items.adjustments",
            "items.refundable",
            "items.tax_lines",
            "items.variant",
            "items.variant.product",
            "items.variant.product.profiles",
            "refunds",
            "region",
            "shipping_address",
            "shipping_methods",
            "shipping_methods.tax_lines",
            "swaps",
            "swaps.additional_items",
            "swaps.additional_items.adjustments",
            "swaps.additional_items.refundable",
            "swaps.additional_items.tax_lines"
          ],
          "totals": [
            "discount_total",
            "gift_card_tax_total",
            "gift_card_total",
            "paid_total",
            "refundable_amount",
            "refunded_total",
            "shipping_total",
            "subtotal",
            "tax_total",
            "total",
            "claims.additional_items.discount_total",
            "claims.additional_items.gift_card_total",
            "claims.additional_items.original_tax_total",
            "claims.additional_items.original_total",
            "claims.additional_items.refundable",
            "claims.additional_items.subtotal",
            "claims.additional_items.tax_total",
            "claims.additional_items.total",
            "items.discount_total",
            "items.gift_card_total",
            "items.original_tax_total",
            "items.original_total",
            "items.refundable",
            "items.subtotal",
            "items.tax_total",
            "items.total",
            "swaps.additional_items.discount_total",
            "swaps.additional_items.gift_card_total",
            "swaps.additional_items.original_tax_total",
            "swaps.additional_items.original_total",
            "swaps.additional_items.refundable",
            "swaps.additional_items.subtotal",
            "swaps.additional_items.tax_total",
            "swaps.additional_items.total"
          ]
        },
        "properties": {
          "count": {
            "description": "可用的项目总数",
            "type": "integer"
          },
          "offset": {
            "description": "检索订单时跳过的订单数量。",
            "type": "integer"
          },
          "limit": {
            "description": "每页的项目数",
            "type": "integer"
          },
          "orders": {
            "type": "array",
            "description": "订单详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "StoreCartsRes": {
        "type": "object",
        "description": "购物车的详细信息。",
        "required": [
          "cart"
        ],
        "x-expanded-relations": {
          "field": "cart",
          "relations": [
            "billing_address",
            "discounts",
            "discounts.rule",
            "gift_cards",
            "items",
            "items.adjustments",
            "items.variant",
            "payment",
            "payment_sessions",
            "region",
            "region.countries",
            "region.payment_providers",
            "shipping_address",
            "shipping_methods"
          ],
          "eager": [
            "region.fulfillment_providers",
            "region.payment_providers",
            "shipping_methods.shipping_option"
          ],
          "implicit": [
            "items",
            "items.variant",
            "items.variant.product",
            "items.variant.product.profiles",
            "items.tax_lines",
            "items.adjustments",
            "gift_cards",
            "discounts",
            "discounts.rule",
            "shipping_methods",
            "shipping_methods.tax_lines",
            "shipping_address",
            "region",
            "region.tax_rates"
          ],
          "totals": [
            "discount_total",
            "gift_card_tax_total",
            "gift_card_total",
            "item_tax_total",
            "refundable_amount",
            "refunded_total",
            "shipping_tax_total",
            "shipping_total",
            "subtotal",
            "tax_total",
            "total",
            "items.discount_total",
            "items.gift_card_total",
            "items.original_tax_total",
            "items.original_total",
            "items.refundable",
            "items.subtotal",
            "items.tax_total",
            "items.total"
          ]
        },
        "properties": {
          "cart": {
            "$ref": "#/components/schemas/Cart"
          }
        }
      },
      "Cart": {
        "title": "Cart",
        "description": "购物车代表一个虚拟购物袋。它可用于完成订单、交换或索赔。",
        "type": "object",
        "required": [
          "billing_address_id",
          "completed_at",
          "context",
          "created_at",
          "customer_id",
          "deleted_at",
          "email",
          "id",
          "idempotency_key",
          "metadata",
          "payment_authorized_at",
          "payment_id",
          "payment_session",
          "region_id",
          "shipping_address_id",
          "type",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "购物车的 ID",
            "type": "string",
            "examples": [
              "cart_01G8ZH853Y6TFXWPG5EYE81X63"
            ]
          },
          "email": {
            "description": "与购物车关联的电子邮件",
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "billing_address_id": {
            "description": "账单地址的 ID",
            "type": "string",
            "examples": [
              "addr_01G8ZH853YPY9B94857DY91YGW"
            ],
            "nullable": true
          },
          "shipping_address_id": {
            "description": "送货地址的 ID",
            "type": "string",
            "examples": [
              "addr_01G8ZH853YPY9B94857DY91YGW"
            ],
            "nullable": true
          },
          "region_id": {
            "description": "地区的 ID",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ]
          },
          "customer_id": {
            "description": "客户的 ID",
            "type": "string",
            "examples": [
              "cus_01G2SG30J8C85S4A5CHM2S1NS2"
            ],
            "nullable": true
          },
          "customer": {
            "description": "购物车所属客户的详细信息。",
            "x-expandable": "customer",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "payment_session": {
            "description": "购物车中所选支付会话的详细信息。",
            "x-expandable": "payment_session",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "payment_id": {
            "description": "付款的 ID（如果可用）",
            "type": "string",
            "examples": [
              "pay_01G8ZCC5W42ZNY842124G7P5R9"
            ],
            "nullable": true
          },
          "payment": {
            "description": "与购物车关联的付款的详细信息。",
            "x-expandable": "payment",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "completed_at": {
            "description": "购物车完成的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payment_authorized_at": {
            "description": "付款获得授权的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sales_channel_id": {
            "description": "购物车关联的销售渠道 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "shipping_total": {
            "description": "运费总额",
            "type": "integer",
            "examples": [
              1000
            ]
          },
          "discount_total": {
            "description": "折扣总额（四舍五入）",
            "type": "integer",
            "examples": [
              800
            ]
          },
          "raw_discount_total": {
            "description": "折扣总额",
            "type": "integer",
            "examples": [
              800
            ]
          },
          "item_tax_total": {
            "description": "含税商品总额",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "shipping_tax_total": {
            "description": "含税运费总额",
            "type": "integer",
            "examples": [
              1000
            ]
          },
          "tax_total": {
            "description": "税总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "refunded_total": {
            "description": "如果与此购物车关联的订单已退回，则为退款总额。",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "total": {
            "description": "购物车的总金额",
            "type": "integer",
            "examples": [
              8200
            ]
          },
          "subtotal": {
            "description": "购物车小计",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "refundable_amount": {
            "description": "可退款金额",
            "type": "integer",
            "examples": [
              8200
            ]
          },
          "gift_card_total": {
            "description": "礼品卡总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "gift_card_tax_total": {
            "description": "含税礼品卡总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "payment_sessions": {
            "description": "在购物车上创建的所有支付会话的详细信息。",
            "type": "array",
            "x-expandable": "payment_sessions",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "type": {
            "description": "购物车的类型。",
            "type": "string",
            "default": "default",
            "enum": [
              "default",
              "swap",
              "draft_order",
              "payment_link",
              "claim"
            ]
          },
          "idempotency_key": {
            "description": "随机生成的密钥，用于在发生故障时继续完成购物车。",
            "type": "string",
            "externalDocs": {
              "url": "https://docs.medusajs.com/development/idempotency-key/overview.md",
              "description": "了解有关如何使用幂等性密钥的更多信息。"
            },
            "nullable": true
          },
          "context": {
            "description": "购物车的上下文，可以包含 IP 或用户代理等信息。",
            "type": "object",
            "examples": [
              {
                "ip": "::1",
                "user_agent": "PostmanRuntime/7.29.2"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "sales_channel": {
            "$ref": "#/components/schemas/SalesChannel"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "shipping_methods": {
            "description": "添加到购物车的送货方式的详细信息。",
            "type": "array",
            "x-expandable": "shipping_methods",
            "items": {
              "$ref": "#/components/schemas/ShippingMethod"
            }
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "gift_cards": {
            "description": "应用于购物车的所有礼品卡的详细信息数组。",
            "type": "array",
            "x-expandable": "gift_cards",
            "items": {
              "$ref": "#/components/schemas/GiftCard"
            }
          },
          "discounts": {
            "description": "应用于购物车的所有折扣的详细信息数组。",
            "type": "array",
            "x-expandable": "discounts",
            "items": {
              "$ref": "#/components/schemas/Discount"
            }
          },
          "items": {
            "description": "添加到购物车的订单项。",
            "type": "array",
            "x-expandable": "items",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          }
        }
      },
      "StoreSwapsRes": {
        "type": "object",
        "description": "交换的详细信息。",
        "required": [
          "swap"
        ],
        "x-expanded-relations": {
          "field": "swap",
          "relations": [
            "additional_items",
            "additional_items.variant",
            "cart",
            "fulfillments",
            "order",
            "payment",
            "return_order",
            "return_order.shipping_method",
            "shipping_address",
            "shipping_methods"
          ],
          "eager": [
            "fulfillments.items"
          ]
        },
        "properties": {
          "swap": {
            "$ref": "#/components/schemas/Swap"
          }
        }
      },
      "Swap": {
        "title": "Swap",
        "description": "当客户希望将购买的产品与其他产品进行交换时，可以创建交换。它包括先前购买产品的退货和新产品的配送。它还包括基于交换产品之间的差价所需的任何额外付款或退款的信息。",
        "type": "object",
        "required": [
          "allow_backorder",
          "canceled_at",
          "cart_id",
          "confirmed_at",
          "created_at",
          "deleted_at",
          "difference_due",
          "fulfillment_status",
          "id",
          "idempotency_key",
          "metadata",
          "no_notification",
          "order_id",
          "payment_status",
          "shipping_address_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "交换的 ID",
            "type": "string",
            "examples": [
              "swap_01F0YET86Y9G92D3YDR9Y6V676"
            ]
          },
          "order_id": {
            "description": "交换所属订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ]
          },
          "order": {
            "description": "交换所属订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "return_order": {
            "description": "属于交换的退货的详细信息，其中包含要退回的商品的详细信息。",
            "x-expandable": "return_order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "payment": {
            "description": "当 `difference_due` 为正数时，客户授权的额外付款的详细信息。",
            "x-expandable": "payment",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "difference_due": {
            "description": "订单原始总额与交换产生的新总额之间的差额。如果其值为负数，则必须向客户退款。如果为正数，则客户必须授权额外付款。否则，无需进行任何付款处理。",
            "type": "integer",
            "examples": [
              0
            ],
            "nullable": true
          },
          "shipping_address_id": {
            "description": "要将新订单项发送到的地址 - 在大多数情况下，这与订单上的送货地址相同。",
            "type": "string",
            "examples": [
              "addr_01G8ZH853YPY9B94857DY91YGW"
            ],
            "nullable": true
          },
          "cart_id": {
            "description": "客户用来完成交换的购物车的 ID。",
            "type": "string",
            "examples": [
              "cart_01G8ZH853Y6TFXWPG5EYE81X63"
            ],
            "nullable": true
          },
          "cart": {
            "description": "客户用来完成交换的购物车的详细信息。",
            "x-expandable": "cart",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "confirmed_at": {
            "description": "客户确认交换的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "canceled_at": {
            "description": "取消交换的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "no_notification": {
            "description": "如果设置为 true，则不会发送与此交换相关的通知",
            "type": "boolean",
            "examples": [
              false
            ],
            "nullable": true
          },
          "allow_backorder": {
            "description": "如果为 true，则可以使用缺货商品完成交换",
            "type": "boolean",
            "default": false
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fulfillment_status": {
            "description": "交换配送的状态。",
            "type": "string",
            "enum": [
              "not_fulfilled",
              "fulfilled",
              "shipped",
              "partially_shipped",
              "canceled",
              "requires_action"
            ],
            "examples": [
              "not_fulfilled"
            ]
          },
          "payment_status": {
            "description": "交换付款的状态。付款可以指退款或新金额的授权。",
            "type": "string",
            "enum": [
              "not_paid",
              "awaiting",
              "captured",
              "confirmed",
              "canceled",
              "difference_refunded",
              "partially_refunded",
              "refunded",
              "requires_action"
            ],
            "examples": [
              "not_paid"
            ]
          },
          "fulfillments": {
            "description": "用于将新商品发送给客户的配送的详细信息。",
            "x-expandable": "fulfillments",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "idempotency_key": {
            "description": "随机生成的密钥，用于在发生故障时继续完成交换。",
            "type": "string",
            "externalDocs": {
              "url": "https://docs.medusajs.com/development/idempotency-key/overview.md",
              "description": "了解有关如何使用幂等性密钥的更多信息。"
            },
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "shipping_methods": {
            "description": "用于配送购买的额外商品的送货方式的详细信息。",
            "type": "array",
            "x-expandable": "shipping_methods",
            "items": {
              "$ref": "#/components/schemas/ShippingMethod"
            }
          },
          "additional_items": {
            "description": "要发送给客户的新产品的详细信息，表示为订单项。",
            "type": "array",
            "x-expandable": "additional_items",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          }
        }
      },
      "LineItem": {
        "title": "Line Item",
        "description": "将产品添加到购物车时，会创建订单项。当购买订单项时，它们将被复制到生成的订单、交换或索赔中，并且最终可以在配送和退货中引用。订单项也可以用于订单编辑。",
        "type": "object",
        "required": [
          "allow_discounts",
          "cart_id",
          "claim_order_id",
          "created_at",
          "description",
          "fulfilled_quantity",
          "has_shipping",
          "id",
          "is_giftcard",
          "is_return",
          "metadata",
          "order_edit_id",
          "order_id",
          "original_item_id",
          "quantity",
          "returned_quantity",
          "shipped_quantity",
          "should_merge",
          "swap_id",
          "thumbnail",
          "title",
          "unit_price",
          "updated_at",
          "variant_id"
        ],
        "properties": {
          "id": {
            "description": "订单项的 ID",
            "type": "string",
            "examples": [
              "item_01G8ZC9GWT6B2GP5FSXRXNFNGN"
            ]
          },
          "cart_id": {
            "description": "订单项可能所属的购物车的 ID。",
            "type": "string",
            "examples": [
              "cart_01G8ZH853Y6TFXWPG5EYE81X63"
            ],
            "nullable": true
          },
          "cart": {
            "description": "订单项可能所属的购物车的详细信息。",
            "x-expandable": "cart",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "order_id": {
            "description": "订单项可能所属的订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "order": {
            "description": "订单项可能所属的订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "swap_id": {
            "description": "订单项可能所属的交换的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "swap": {
            "description": "订单项可能所属的交换的详细信息。",
            "x-expandable": "swap",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "claim_order_id": {
            "description": "订单项可能所属的索赔的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "claim_order": {
            "description": "订单项可能所属的索赔的详细信息。",
            "x-expandable": "claim_order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "original_item_id": {
            "description": "原始订单项的 ID。如果订单项属于引用订单的资源（例如退货或订单编辑），则此属性很有用。",
            "type": "string",
            "nullable": true
          },
          "order_edit_id": {
            "description": "商品可能所属的订单编辑的 ID。",
            "type": "string",
            "nullable": true
          },
          "order_edit": {
            "description": "订单编辑的详细信息。",
            "x-expandable": "order_edit",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "title": {
            "description": "订单项的标题。",
            "type": "string",
            "examples": [
              "Medusa Coffee Mug"
            ]
          },
          "description": {
            "description": "订单项内容的更详细描述。",
            "type": "string",
            "examples": [
              "One Size"
            ],
            "nullable": true
          },
          "thumbnail": {
            "description": "订单项内容的小图像的 URL 字符串。",
            "type": "string",
            "format": "uri",
            "examples": [
              "https://medusa-public-images.s3.eu-west-1.amazonaws.com/coffee-mug.png"
            ],
            "nullable": true
          },
          "is_return": {
            "description": "商品是否正在退回",
            "type": "boolean",
            "default": false
          },
          "is_giftcard": {
            "description": "指示订单项是否是礼品卡的标志。",
            "type": "boolean",
            "default": false
          },
          "should_merge": {
            "description": "指示具有相同变体的新订单项是应合并还是添加为附加订单项的标志。",
            "type": "boolean",
            "default": true
          },
          "allow_discounts": {
            "description": "指示在进行折扣计算时是否应包含订单项的标志。",
            "type": "boolean",
            "default": true
          },
          "has_shipping": {
            "description": "指示订单项是否与之关联的配送的标志。",
            "type": "boolean",
            "examples": [
              false
            ],
            "nullable": true
          },
          "unit_price": {
            "description": "订单项中一个单位内容的价格。这应该使用订单项所属的购物车/订单/交换/索赔定义的货币。",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "variant_id": {
            "description": "订单项中包含的产品变体的 ID。",
            "type": "string",
            "examples": [
              "variant_01G1G5V2MRX2V3PVSR2WXYPFB6"
            ],
            "nullable": true
          },
          "quantity": {
            "description": "订单项中内容的数量。",
            "type": "integer",
            "examples": [
              1
            ]
          },
          "fulfilled_quantity": {
            "description": "已配送的订单项的数量。",
            "type": "integer",
            "examples": [
              0
            ],
            "nullable": true
          },
          "returned_quantity": {
            "description": "已退回的订单项的数量。",
            "type": "integer",
            "examples": [
              0
            ],
            "nullable": true
          },
          "shipped_quantity": {
            "description": "已发货的订单项的数量。",
            "type": "integer",
            "examples": [
              0
            ],
            "nullable": true
          },
          "refundable": {
            "description": "可以从给定订单项退款的金额。考虑了税费和折扣。",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "subtotal": {
            "description": "订单项的小计",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "tax_total": {
            "description": "订单项的税总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "total": {
            "description": "订单项的总金额",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "original_total": {
            "description": "订单项的原始总金额",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "original_tax_total": {
            "description": "订单项的原始税总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "discount_total": {
            "description": "订单项的折扣总额（四舍五入）",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "raw_discount_total": {
            "description": "订单项的折扣总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "gift_card_total": {
            "description": "订单项的礼品卡总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "includes_tax": {
            "description": "指示订单项 unit_price 是否包含税费",
            "x-featureFlag": "tax_inclusive_pricing",
            "type": "boolean",
            "default": false
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "tax_lines": {
            "description": "商品税行的详细信息。",
            "x-expandable": "tax_lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemTaxLine"
            }
          },
          "variant": {
            "$ref": "#/components/schemas/ProductVariant"
          },
          "adjustments": {
            "description": "商品调整的详细信息，当对商品应用折扣时可用。",
            "x-expandable": "adjustments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemAdjustment"
            }
          }
        }
      },
      "LineItemAdjustment": {
        "title": "Line Item Adjustment",
        "description": "订单项调整包括应用于订单项的折扣的详细信息。",
        "type": "object",
        "required": [
          "amount",
          "description",
          "discount_id",
          "id",
          "item_id",
          "metadata"
        ],
        "properties": {
          "id": {
            "description": "订单项调整的 ID",
            "type": "string",
            "examples": [
              "lia_01G8TKE4XYCTHSCK2GDEP47RE1"
            ]
          },
          "item_id": {
            "description": "订单项的 ID",
            "type": "string",
            "examples": [
              "item_01G8ZC9GWT6B2GP5FSXRXNFNGN"
            ]
          },
          "item": {
            "description": "订单项的详细信息。",
            "x-expandable": "item",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "description": {
            "description": "订单项的调整说明",
            "type": "string",
            "examples": [
              "Adjusted item's price."
            ]
          },
          "discount_id": {
            "description": "与调整关联的折扣的 ID",
            "type": "string",
            "examples": [
              "disc_01F0YESMW10MGHWJKZSDDMN0VN"
            ],
            "nullable": true
          },
          "amount": {
            "description": "调整金额",
            "type": "number",
            "examples": [
              1000
            ]
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          }
        }
      },
      "Discount": {
        "title": "Discount",
        "description": "出于促销目的，可以将折扣应用于购物车。",
        "type": "object",
        "required": [
          "code",
          "created_at",
          "deleted_at",
          "ends_at",
          "id",
          "is_disabled",
          "is_dynamic",
          "metadata",
          "parent_discount_id",
          "rule_id",
          "starts_at",
          "updated_at",
          "usage_count",
          "usage_limit",
          "valid_duration"
        ],
        "properties": {
          "id": {
            "description": "折扣的 ID",
            "type": "string",
            "examples": [
              "disc_01F0YESMW10MGHWJKZSDDMN0VN"
            ]
          },
          "code": {
            "description": "折扣的唯一代码 - 这将由客户用来应用折扣",
            "type": "string",
            "examples": [
              "10DISC"
            ]
          },
          "is_dynamic": {
            "description": "一个标志，指示是否可以生成多个折扣实例。即用于简报折扣",
            "type": "boolean",
            "examples": [
              false
            ]
          },
          "rule_id": {
            "description": "定义折扣如何应用于购物车的折扣规则的 ID。",
            "type": "string",
            "examples": [
              "dru_01F0YESMVK96HVX7N419E3CJ7C"
            ],
            "nullable": true
          },
          "is_disabled": {
            "description": "折扣是否已禁用。禁用的折扣不能应用于购物车",
            "type": "boolean",
            "examples": [
              false
            ]
          },
          "parent_discount_id": {
            "description": "从中创建折扣的折扣。这将始终是动态折扣",
            "type": "string",
            "examples": [
              "disc_01G8ZH853YPY9B94857DY91YGW"
            ],
            "nullable": true
          },
          "parent_discount": {
            "description": "从中创建此折扣的父折扣的详细信息。",
            "x-expandable": "parent_discount",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "starts_at": {
            "description": "可以使用折扣的时间。",
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "description": "折扣不能再使用的时间。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "valid_duration": {
            "description": "折扣持续时间",
            "type": "string",
            "examples": [
              "P3Y6M4DT12H30M5S"
            ],
            "nullable": true
          },
          "usage_limit": {
            "description": "折扣的最大使用次数。",
            "type": "integer",
            "examples": [
              100
            ],
            "nullable": true
          },
          "usage_count": {
            "description": "折扣的使用次数。",
            "type": "integer",
            "default": 0,
            "examples": [
              50
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "rule": {
            "$ref": "#/components/schemas/DiscountRule"
          },
          "regions": {
            "description": "可以使用折扣的地区的详细信息。",
            "type": "array",
            "x-expandable": "regions",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          }
        }
      },
      "StoreGiftCardsRes": {
        "description": "礼品卡的详细信息。",
        "type": "object",
        "required": [
          "gift_card"
        ],
        "properties": {
          "gift_card": {
            "$ref": "#/components/schemas/GiftCard"
          }
        }
      },
      "GiftCard": {
        "title": "Gift Card",
        "description": "礼品卡是可兑换的，代表可用于支付订单的价值。",
        "type": "object",
        "required": [
          "balance",
          "code",
          "created_at",
          "deleted_at",
          "ends_at",
          "id",
          "is_disabled",
          "metadata",
          "order_id",
          "region_id",
          "tax_rate",
          "updated_at",
          "value"
        ],
        "properties": {
          "id": {
            "description": "礼品卡的 ID",
            "type": "string",
            "examples": [
              "gift_01G8XKBPBQY2R7RBET4J7E0XQZ"
            ]
          },
          "code": {
            "description": "标识礼品卡的唯一代码。客户使用它来兑换礼品卡的价值。",
            "type": "string",
            "examples": [
              "3RFT-MH2C-Y4YZ-XMN4"
            ]
          },
          "value": {
            "description": "礼品卡代表的价值。",
            "type": "integer",
            "examples": [
              10
            ]
          },
          "balance": {
            "description": "礼品卡上的剩余价值。",
            "type": "integer",
            "examples": [
              10
            ]
          },
          "region_id": {
            "description": "此礼品卡可用的地区的 ID。",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ]
          },
          "order_id": {
            "description": "购买礼品卡的订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "order": {
            "description": "购买礼品卡的订单的详细信息。",
            "x-expandable": "region",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "is_disabled": {
            "description": "礼品卡是否已禁用。禁用的礼品卡不能应用于购物车。",
            "type": "boolean",
            "default": false
          },
          "ends_at": {
            "description": "礼品卡不能再使用的时间。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tax_rate": {
            "description": "礼品卡的税率，将应用于计算总计",
            "type": "number",
            "examples": [
              0
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          }
        }
      },
      "StoreRegionsListRes": {
        "type": "object",
        "description": "地区列表，包含分页字段。",
        "required": [
          "regions"
        ],
        "x-expanded-relations": {
          "field": "regions",
          "relations": [
            "countries",
            "payment_providers",
            "fulfillment_providers"
          ],
          "eager": [
            "payment_providers",
            "fulfillment_providers"
          ]
        },
        "properties": {
          "count": {
            "type": "integer",
            "description": "可用的项目总数"
          },
          "offset": {
            "type": "integer",
            "description": "检索地区时跳过的地区数量。"
          },
          "limit": {
            "type": "integer",
            "description": "每页的项目数"
          },
          "regions": {
            "type": "array",
            "description": "地区详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          }
        }
      },
      "StoreRegionsRes": {
        "type": "object",
        "description": "地区的详细信息。",
        "required": [
          "region"
        ],
        "x-expanded-relations": {
          "field": "region",
          "relations": [
            "countries",
            "payment_providers",
            "fulfillment_providers"
          ],
          "eager": [
            "payment_providers",
            "fulfillment_providers"
          ]
        },
        "properties": {
          "region": {
            "$ref": "#/components/schemas/Region"
          }
        }
      },
      "Region": {
        "title": "Region",
        "description": "地区包含特定于地理位置的设置，包括货币、税率以及配送和支付提供程序。一个地区可以包含多个国家，以适应跨国界的常见购物设置。",
        "type": "object",
        "required": [
          "automatic_taxes",
          "created_at",
          "currency_code",
          "deleted_at",
          "gift_cards_taxable",
          "id",
          "metadata",
          "name",
          "tax_code",
          "tax_provider_id",
          "tax_rate",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "地区的 ID",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ]
          },
          "name": {
            "description": "向客户显示的地区名称。如果该地区只有一个国家，则建议写国家名称。",
            "type": "string",
            "examples": [
              "EU"
            ]
          },
          "tax_rate": {
            "description": "在该地区购买商品应收取的税率。",
            "type": "number",
            "examples": [
              0
            ]
          },
          "tax_code": {
            "description": "在该地区购买商品时使用的税码。其他系统可能会将此用于会计目的。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "gift_cards_taxable": {
            "description": "在此地区，礼品卡是否应纳税。",
            "type": "boolean",
            "default": true
          },
          "automatic_taxes": {
            "description": "在此地区是否应自动征税。",
            "type": "boolean",
            "default": true
          },
          "tax_provider_id": {
            "description": "在此地区使用的税费提供程序的 ID",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "includes_tax": {
            "description": "该地区的价格是否包含税费",
            "type": "boolean",
            "x-featureFlag": "tax_inclusive_pricing",
            "default": false
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "currency_code": {
            "description": "该地区使用的三个字符的货币代码。",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
              "description": "查看代码列表。"
            },
            "examples": [
              "usd"
            ]
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "countries": {
            "description": "此地区包含的国家/地区的详细信息。",
            "type": "array",
            "x-expandable": "countries",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          },
          "tax_provider": {
            "$ref": "#/components/schemas/TaxProvider"
          },
          "payment_providers": {
            "description": "The details of the payment providers that can be used to process payments in the region.",
            "type": "array",
            "x-expandable": "payment_providers",
            "items": {
              "$ref": "#/components/schemas/PaymentProvider"
            }
          },
          "fulfillment_providers": {
            "description": "可用于配送该地区订单和类似资源的商品的配送提供程序的详细信息。",
            "type": "array",
            "x-expandable": "fulfillment_providers",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProvider"
            }
          },
          "tax_rates": {
            "description": "除默认税率外，该地区使用的税率的详细信息。",
            "type": "array",
            "x-expandable": "tax_rates",
            "items": {
              "$ref": "#/components/schemas/TaxRate"
            }
          }
        }
      },
      "TaxRate": {
        "title": "Tax Rate",
        "description": "税率可用于定义在给定区域内对指定产品、产品类型和送货选项收取的自定义税率。",
        "type": "object",
        "required": [
          "code",
          "created_at",
          "id",
          "metadata",
          "name",
          "rate",
          "region_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "税率的 ID",
            "type": "string",
            "examples": [
              "txr_01G8XDBAWKBHHJRKH0AV02KXBR"
            ]
          },
          "rate": {
            "description": "要收取的数字税率",
            "type": "number",
            "examples": [
              10
            ],
            "nullable": true
          },
          "code": {
            "description": "用于标识税收类型的代码",
            "type": "string",
            "examples": [
              "tax01"
            ],
            "nullable": true
          },
          "name": {
            "description": "税收的人类友好名称",
            "type": "string",
            "examples": [
              "Tax Example"
            ]
          },
          "region_id": {
            "description": "税率所属地区的 ID。",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ]
          },
          "region": {
            "description": "税率所属地区的详细信息。",
            "x-expandable": "region",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "product_count": {
            "description": "产品数量",
            "type": "integer",
            "examples": [
              10
            ]
          },
          "product_type_count": {
            "description": "产品类型数量",
            "type": "integer",
            "examples": [
              2
            ]
          },
          "shipping_option_count": {
            "description": "送货选项数量",
            "type": "integer",
            "examples": [
              1
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "product_types": {
            "description": "属于此税率的产品类型的详细信息。",
            "type": "array",
            "x-expandable": "product_types",
            "items": {
              "$ref": "#/components/schemas/ProductType"
            }
          },
          "shipping_options": {
            "description": "属于此税率的送货选项的详细信息。",
            "type": "array",
            "x-expandable": "shipping_options",
            "items": {
              "$ref": "#/components/schemas/ShippingOption"
            }
          },
          "products": {
            "description": "属于此税率的产品的详细信息。",
            "type": "array",
            "x-expandable": "products",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "StoreProductsRes": {
        "type": "object",
        "required": [
          "product"
        ],
        "x-expanded-relations": {
          "field": "product",
          "relations": [
            "collection",
            "images",
            "options",
            "options.values",
            "tags",
            "type",
            "variants",
            "variants.options",
            "variants.prices"
          ],
          "totals": [
            "variants.purchasable"
          ]
        },
        "properties": {
          "product": {
            "$ref": "#/components/schemas/PricedProduct"
          }
        }
      },
      "StoreProductsListRes": {
        "type": "object",
        "description": "产品列表，包含分页字段。",
        "required": [
          "products",
          "count",
          "offset",
          "limit"
        ],
        "x-expanded-relations": {
          "field": "products",
          "relations": [
            "collection",
            "images",
            "options",
            "options.values",
            "tags",
            "type",
            "variants",
            "variants.options",
            "variants.prices"
          ],
          "totals": [
            "variants.purchasable"
          ]
        },
        "properties": {
          "count": {
            "type": "integer",
            "description": "可用的项目总数"
          },
          "offset": {
            "type": "integer",
            "description": "检索产品时跳过的产品数量。"
          },
          "limit": {
            "type": "integer",
            "description": "每页的项目数"
          },
          "products": {
            "type": "array",
            "description": "产品详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/PricedProduct"
            }
          }
        }
      },
      "PricedProduct": {
        "title": "Priced Product",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "type": "object",
            "properties": {
              "variants": {
                "description": "产品变体及其价格。",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PricedVariant"
                }
              }
            }
          }
        ]
      },
      "Product": {
        "title": "Product",
        "description": "A product is a saleable item that holds general information such as name or description. It must include at least one Product Variant, where each product variant defines different options to purchase the product with (for example, different sizes or colors). The prices and inventory of the product are defined on the variant level.",
        "type": "object",
        "required": [
          "collection_id",
          "created_at",
          "deleted_at",
          "description",
          "discountable",
          "external_id",
          "handle",
          "height",
          "hs_code",
          "id",
          "is_giftcard",
          "length",
          "material",
          "metadata",
          "mid_code",
          "origin_country",
          "profile_id",
          "status",
          "subtitle",
          "type_id",
          "thumbnail",
          "title",
          "updated_at",
          "weight",
          "width"
        ],
        "properties": {
          "id": {
            "description": "产品的 ID",
            "type": "string",
            "examples": [
              "prod_01G1G5V2MBA328390B5AXJ610F"
            ]
          },
          "title": {
            "description": "可以显示的标题，用于轻松识别产品。",
            "type": "string",
            "examples": [
              "Medusa Coffee Mug"
            ]
          },
          "subtitle": {
            "description": "可选的副标题，可用于进一步指定产品。",
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "产品的简短描述。",
            "type": "string",
            "examples": [
              "Every programmer's best friend."
            ],
            "nullable": true
          },
          "handle": {
            "description": "产品的唯一标识符（例如，用于 slug 结构）。",
            "type": "string",
            "examples": [
              "coffee-mug"
            ],
            "nullable": true
          },
          "is_giftcard": {
            "description": "产品是否代表礼品卡。代表礼品卡的产品将在购买后自动生成可兑换的礼品卡代码。",
            "type": "boolean",
            "default": false
          },
          "thumbnail": {
            "description": "可用于标识产品的图像文件的 URL。",
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "profile_id": {
            "description": "产品所属的送货方案的 ID。送货方案具有一组定义的送货选项，可用于配送产品。",
            "type": "string",
            "examples": [
              "sp_01G1G5V239ENSZ5MV4JAR737BM"
            ]
          },
          "weight": {
            "description": "产品变体的重量。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "length": {
            "description": "产品变体的长度。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "height": {
            "description": "产品变体的高度。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "width": {
            "description": "产品变体的宽度。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "hs_code": {
            "description": "产品变体的协调制度代码。配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "origin_country": {
            "description": "生产产品变体的国家/地区。配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "mid_code": {
            "description": "标识产品变体制造商的制造商识别码。配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "material": {
            "description": "产品变体的材料和成分，配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "collection_id": {
            "description": "产品所属的产品集合的 ID。",
            "type": "string",
            "examples": [
              "pcol_01F0YESBFAZ0DV6V831JXWH0BG"
            ],
            "nullable": true
          },
          "type_id": {
            "description": "产品所属的产品类型的 ID。",
            "type": "string",
            "examples": [
              "ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ],
            "nullable": true
          },
          "discountable": {
            "description": "产品是否可以打折。当此标志设置为 `false` 时，折扣将不适用于此产品的订单项。",
            "type": "boolean",
            "default": true
          },
          "external_id": {
            "description": "产品的外部 ID",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "description": "产品的状态",
            "type": "string",
            "default": "draft",
            "enum": [
              "draft",
              "proposed",
              "published",
              "rejected"
            ]
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "categories": {
            "description": "此产品所属的产品类别的详细信息。",
            "type": "array",
            "x-expandable": "categories",
            "x-featureFlag": "product_categories",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          },
          "profile": {
            "$ref": "#/components/schemas/ShippingProfile"
          },
          "profiles": {
            "description": "如果扩展了 `profiles` 关系，则可用。",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingProfile"
            },
            "nullable": true
          },
          "collection": {
            "$ref": "#/components/schemas/ProductCollection"
          },
          "type": {
            "$ref": "#/components/schemas/ProductType"
          },
          "tags": {
            "description": "此产品中使用的产品标签的详细信息。",
            "type": "array",
            "x-expandable": "type",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          },
          "images": {
            "description": "产品图像的详细信息。",
            "type": "array",
            "x-expandable": "images",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "options": {
            "description": "为产品定义的产品选项的详细信息。产品的变体将具有产品选项值的唯一组合。",
            "type": "array",
            "x-expandable": "options",
            "items": {
              "$ref": "#/components/schemas/ProductOption"
            }
          },
          "sales_channels": {
            "description": "此产品可用的销售渠道的详细信息。",
            "type": "array",
            "x-expandable": "sales_channels",
            "items": {
              "$ref": "#/components/schemas/SalesChannel"
            }
          },
          "variants": {
            "description": "属于产品的产品变体的详细信息。每个变体都将具有产品选项值的唯一组合。",
            "type": "array",
            "x-expandable": "variants",
            "items": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          }
        }
      },
      "SalesChannel": {
        "title": "Sales Channel",
        "description": "销售渠道是企业为客户提供产品购买方式的方法。例如，网上商店可以是一个销售渠道，移动应用程序可以是另一个销售渠道。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "description",
          "id",
          "is_disabled",
          "name",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "销售渠道的 ID",
            "type": "string",
            "examples": [
              "sc_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ]
          },
          "name": {
            "description": "销售渠道的名称。",
            "type": "string",
            "examples": [
              "Market"
            ]
          },
          "description": {
            "description": "销售渠道的描述。",
            "type": "string",
            "examples": [
              "Multi-vendor market"
            ],
            "nullable": true
          },
          "is_disabled": {
            "description": "指定销售渠道是启用还是禁用。",
            "type": "boolean",
            "default": false
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "locations": {
            "description": "与销售渠道相关的库存地点的详细信息。",
            "type": "array",
            "x-expandable": "locations",
            "items": {
              "$ref": "#/components/schemas/SalesChannelLocation"
            }
          }
        }
      },
      "SalesChannelLocation": {
        "title": "Sales Channel Stock Location",
        "description": "这表示销售渠道和库存地点之间的关联。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "location_id",
          "sales_channel_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "销售渠道库存地点的 ID",
            "type": "string",
            "examples": [
              "scloc_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ]
          },
          "sales_channel_id": {
            "description": "销售渠道的 ID",
            "type": "string",
            "examples": [
              "sc_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ]
          },
          "location_id": {
            "description": "库存地点的 ID。",
            "type": "string"
          },
          "sales_channel": {
            "description": "地点关联的销售渠道的详细信息。",
            "x-expandable": "sales_channel",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DiscountRule": {
        "title": "Discount Rule",
        "description": "折扣规则定义了在应用于购物车时如何计算折扣。",
        "type": "object",
        "required": [
          "allocation",
          "created_at",
          "deleted_at",
          "description",
          "id",
          "metadata",
          "type",
          "updated_at",
          "value"
        ],
        "properties": {
          "id": {
            "description": "折扣规则的 ID",
            "type": "string",
            "examples": [
              "dru_01F0YESMVK96HVX7N419E3CJ7C"
            ]
          },
          "description": {
            "description": "折扣的简短描述",
            "type": "string",
            "examples": [
              "10 Percent"
            ],
            "nullable": true
          },
          "value": {
            "description": "折扣代表的值；这将取决于折扣的类型",
            "type": "integer",
            "examples": [
              10
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "折扣的类型，可以是 `fixed`（固定金额折扣）、`percentage`（百分比折扣）或 `free_shipping`（免运费优惠券）。",
            "type": "string",
            "enum": [
              "fixed",
              "percentage",
              "free_shipping"
            ],
            "examples": [
              "percentage"
            ]
          },
          "allocation": {
            "description": "折扣应应用于的范围。",
            "type": "string",
            "enum": [
              "total",
              "item"
            ],
            "examples": [
              "total"
            ],
            "nullable": true
          },
          "conditions": {
            "description": "与规则关联的折扣条件的详细信息。它们可用于限制何时可以使用折扣。",
            "type": "array",
            "x-expandable": "conditions",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "ShippingMethod": {
        "title": "Shipping Method",
        "description": "送货方式表示可以运送订单或退货的方式。送货方式是从送货选项创建的，但可能包含配送提供商处理货件所需的额外详细信息。如果送货方式是为退货创建的，则它可能与退货所属的索赔或交换相关联。",
        "type": "object",
        "required": [
          "cart_id",
          "claim_order_id",
          "data",
          "id",
          "order_id",
          "price",
          "return_id",
          "shipping_option_id",
          "swap_id"
        ],
        "properties": {
          "id": {
            "description": "送货方式的 ID",
            "type": "string",
            "examples": [
              "sm_01F0YET7DR2E7CYVSDHM593QG2"
            ]
          },
          "shipping_option_id": {
            "description": "送货方式构建自的送货选项的 ID。",
            "type": "string",
            "examples": [
              "so_01G1G5V27GYX4QXNARRQCW1N8T"
            ]
          },
          "order_id": {
            "description": "使用送货方式的订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "order": {
            "description": "使用送货方式的订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "claim_order_id": {
            "description": "使用送货方式的索赔的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "claim_order": {
            "description": "使用送货方式的索赔的详细信息。",
            "x-expandable": "claim_order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "cart_id": {
            "description": "使用送货方式的购物车的 ID。",
            "type": "string",
            "examples": [
              "cart_01G8ZH853Y6TFXWPG5EYE81X63"
            ],
            "nullable": true
          },
          "cart": {
            "description": "使用送货方式的购物车的详细信息。",
            "x-expandable": "cart",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "swap_id": {
            "description": "使用送货方式的交换的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "swap": {
            "description": "使用送货方式的交换的详细信息。",
            "x-expandable": "swap",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "return_id": {
            "description": "使用送货方式的退货的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "return_order": {
            "description": "使用送货方式的退货的详细信息。",
            "x-expandable": "return_order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "price": {
            "description": "送货方式的收费金额。价格的货币由送货方式所属的订单所属的地区定义。",
            "type": "integer",
            "examples": [
              200
            ]
          },
          "includes_tax": {
            "description": "送货方式价格是否包含税费",
            "type": "boolean",
            "x-featureFlag": "tax_inclusive_pricing",
            "default": false
          },
          "subtotal": {
            "description": "送货小计",
            "type": "integer",
            "examples": [
              8000
            ]
          },
          "total": {
            "description": "送货总金额",
            "type": "integer",
            "examples": [
              8200
            ]
          },
          "tax_total": {
            "description": "税总额",
            "type": "integer",
            "examples": [
              0
            ]
          },
          "data": {
            "description": "配送提供商配送货物所需的额外数据。这与送货选项数据结合使用，可能包含诸如投递点 ID 之类的信息。",
            "type": "object",
            "examples": [
              {}
            ],
            "properties": {}
          },
          "tax_lines": {
            "description": "应用于送货方式的税行的详细信息。",
            "type": "array",
            "x-expandable": "tax_lines",
            "items": {
              "$ref": "#/components/schemas/ShippingMethodTaxLine"
            }
          },
          "shipping_option": {
            "$ref": "#/components/schemas/ShippingOption"
          }
        }
      },
      "StoreShippingOptionsListRes": {
        "type": "object",
        "description": "物流选项列表。",
        "required": [
          "shipping_options"
        ],
        "x-expanded-relations": {
          "field": "shipping_options",
          "relations": [
            "requirements"
          ]
        },
        "properties": {
          "shipping_options": {
            "type": "array",
            "description": "物流选项详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/PricedShippingOption"
            }
          }
        }
      },
      "StoreCartShippingOptionsListRes": {
        "type": "object",
        "required": [
          "shipping_options"
        ],
        "x-expanded-relations": {
          "field": "shipping_options",
          "implicit": [
            "profile",
            "requirements"
          ]
        },
        "properties": {
          "shipping_options": {
            "type": "array",
            "description": "物流选项详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/PricedShippingOption"
            }
          }
        }
      },
      "PricedShippingOption": {
        "title": "Priced Shipping Option",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingOption"
          },
          {
            "type": "object",
            "properties": {
              "price_incl_tax": {
                "type": "number",
                "description": "含税价格"
              },
              "tax_amount": {
                "type": "number",
                "description": "适用的税费。"
              },
              "tax_rates": {
                "type": "array",
                "description": "应用税率数组",
                "items": {
                  "type": "object",
                  "properties": {
                    "rate": {
                      "type": "number",
                      "description": "税率值"
                    },
                    "name": {
                      "type": "string",
                      "description": "税率的名称"
                    },
                    "code": {
                      "type": "string",
                      "description": "税率的代码"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ShippingOption": {
        "title": "Shipping Option",
        "description": "送货选项代表可以运送订单或退货的方式。送货选项具有关联的配送提供程序，该提供程序将在启动订单配送时使用。送货选项本身不能添加到购物车，但用作送货方式的模板。这种区别使得可以使用附加信息自定义各个送货方式。",
        "type": "object",
        "required": [
          "admin_only",
          "amount",
          "created_at",
          "data",
          "deleted_at",
          "id",
          "is_return",
          "metadata",
          "name",
          "price_type",
          "profile_id",
          "provider_id",
          "region_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "送货选项的 ID",
            "type": "string",
            "examples": [
              "so_01G1G5V27GYX4QXNARRQCW1N8T"
            ]
          },
          "name": {
            "description": "送货选项的名称 - 这可能会显示给客户。",
            "type": "string",
            "examples": [
              "PostFake Standard"
            ]
          },
          "region_id": {
            "description": "此送货选项可在其中使用的地区的 ID。",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ]
          },
          "region": {
            "description": "此送货选项可在其中使用的地区的详细信息。",
            "x-expandable": "region",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "profile_id": {
            "description": "送货选项所属的送货方案的 ID。",
            "type": "string",
            "examples": [
              "sp_01G1G5V239ENSZ5MV4JAR737BM"
            ]
          },
          "provider_id": {
            "description": "稍后将用于处理从此送货选项及其配送创建的送货方式的配送提供程序的 ID。",
            "type": "string",
            "examples": [
              "manual"
            ]
          },
          "amount": {
            "description": "当送货选项价格类型为 `flat_rate` 时，运费的收费金额。",
            "type": "integer",
            "examples": [
              200
            ],
            "nullable": true
          },
          "is_return": {
            "description": "指示送货选项是否可用于退货发货的标志。",
            "type": "boolean",
            "default": false
          },
          "admin_only": {
            "description": "指示送货选项的使用是否仅限于管理员用户的标志。",
            "type": "boolean",
            "default": false
          },
          "includes_tax": {
            "description": "送货选项价格是否包含税费",
            "type": "boolean",
            "x-featureFlag": "tax_inclusive_pricing",
            "default": false
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "price_type": {
            "description": "从送货选项创建送货方式时使用的定价计算类型。可以是 `flat_rate`（固定价格）或 `calculated`（如果配送提供程序可以提供价格计算）。",
            "type": "string",
            "enum": [
              "flat_rate",
              "calculated"
            ],
            "examples": [
              "flat_rate"
            ]
          },
          "data": {
            "description": "配送提供程序识别送货选项所需的数据。",
            "type": "object",
            "examples": [
              {}
            ],
            "properties": {}
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "profile": {
            "$ref": "#/components/schemas/ShippingProfile"
          },
          "provider": {
            "$ref": "#/components/schemas/FulfillmentProvider"
          },
          "requirements": {
            "description": "必须满足的要求的详细信息，以便送货选项可用于购物车。",
            "type": "array",
            "x-expandable": "requirements",
            "items": {
              "$ref": "#/components/schemas/ShippingOptionRequirement"
            }
          }
        }
      },
      "ShippingOptionRequirement": {
        "title": "Shipping Option Requirement",
        "description": "送货选项要求定义了购物车必须满足的条件，以便送货选项可用于购物车。",
        "type": "object",
        "required": [
          "amount",
          "deleted_at",
          "id",
          "shipping_option_id",
          "type"
        ],
        "properties": {
          "id": {
            "description": "送货选项要求的 ID",
            "type": "string",
            "examples": [
              "sor_01G1G5V29AB4CTNDRFSRWSRKWD"
            ]
          },
          "shipping_option_id": {
            "description": "要求所属的送货选项的 ID。",
            "type": "string",
            "examples": [
              "so_01G1G5V27GYX4QXNARRQCW1N8T"
            ]
          },
          "shipping_option": {
            "description": "要求所属的送货选项的详细信息。",
            "x-expandable": "shipping_option",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "amount": {
            "description": "要与购物车小计进行比较的金额。",
            "type": "integer",
            "examples": [
              100
            ]
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "要求的类型，这定义了该值将如何与购物车的总计进行比较。`min_subtotal` 要求定义送货选项可用的最低小计，而 `max_subtotal` 定义购物车可用的送货选项的最大小计。",
            "type": "string",
            "enum": [
              "min_subtotal",
              "max_subtotal"
            ],
            "examples": [
              "min_subtotal"
            ]
          }
        }
      },
      "StoreVariantsListRes": {
        "type": "object",
        "description": "产品变体列表。",
        "required": [
          "variants"
        ],
        "x-expanded-relations": {
          "field": "variants",
          "relations": [
            "prices",
            "options",
            "product"
          ],
          "totals": [
            "purchasable"
          ]
        },
        "properties": {
          "variants": {
            "type": "array",
            "description": "产品变体描述数组。",
            "items": {
              "$ref": "#/components/schemas/PricedVariant"
            }
          }
        }
      },
      "ProductOption": {
        "title": "Product Option",
        "description": "产品选项定义了产品的不同变体之间可能不同的属性。常见的产品选项是“尺寸”和“颜色”。管理员可以自由创建任何产品选项。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "product_id",
          "title",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "产品选项的 ID",
            "type": "string",
            "examples": [
              "opt_01F0YESHQBZVKCEXJ24BS6PCX3"
            ]
          },
          "title": {
            "description": "产品选项定义的标题（例如“尺寸”）。",
            "type": "string",
            "examples": [
              "Size"
            ]
          },
          "product_id": {
            "description": "此产品选项所属的产品的 ID。",
            "type": "string",
            "examples": [
              "prod_01G1G5V2MBA328390B5AXJ610F"
            ]
          },
          "product": {
            "description": "此产品选项所属的产品的详细信息。",
            "x-expandable": "product",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "values": {
            "description": "产品选项值的详细信息。",
            "type": "array",
            "x-expandable": "values",
            "items": {
              "$ref": "#/components/schemas/ProductOptionValue"
            }
          }
        }
      },
      "StoreVariantsRes": {
        "type": "object",
        "description": "产品变体的详细信息。",
        "required": [
          "variant"
        ],
        "x-expanded-relations": {
          "field": "variant",
          "relations": [
            "prices",
            "options",
            "product"
          ],
          "totals": [
            "purchasable"
          ]
        },
        "properties": {
          "variant": {
            "$ref": "#/components/schemas/PricedVariant"
          }
        }
      },
      "PricedVariant": {
        "title": "Priced Product Variant",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductVariant"
          },
          {
            "type": "object",
            "properties": {
              "original_price": {
                "type": "number",
                "description": "未应用任何折扣价的变体的原始价格。"
              },
              "calculated_price": {
                "type": "number",
                "description": "变体的计算价格。可以是折扣价。"
              },
              "original_price_incl_tax": {
                "type": "number",
                "description": "包含税费的变体的原始价格。"
              },
              "calculated_price_incl_tax": {
                "type": "number",
                "description": "包含税费的变体的计算价格。"
              },
              "original_tax": {
                "type": "number",
                "description": "应用于原始价格的税费。"
              },
              "calculated_tax": {
                "type": "number",
                "description": "应用于计算价格的税费。"
              },
              "tax_rates": {
                "type": "array",
                "description": "应用税率数组",
                "items": {
                  "type": "object",
                  "properties": {
                    "rate": {
                      "type": "number",
                      "description": "税率值"
                    },
                    "name": {
                      "type": "string",
                      "description": "税率的名称"
                    },
                    "code": {
                      "type": "string",
                      "description": "税率的代码"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ProductVariant": {
        "title": "Product Variant",
        "description": "产品变体代表具有特定产品选项配置集的产品。产品可以拥有的产品变体的最大数量由可用的产品选项组合的数量决定。产品必须至少有一个产品变体。",
        "type": "object",
        "required": [
          "allow_backorder",
          "barcode",
          "created_at",
          "deleted_at",
          "ean",
          "height",
          "hs_code",
          "id",
          "inventory_quantity",
          "length",
          "manage_inventory",
          "material",
          "metadata",
          "mid_code",
          "origin_country",
          "product_id",
          "sku",
          "title",
          "upc",
          "updated_at",
          "weight",
          "width"
        ],
        "properties": {
          "id": {
            "description": "产品变体的 ID",
            "type": "string",
            "examples": [
              "variant_01G1G5V2MRX2V3PVSR2WXYPFB6"
            ]
          },
          "title": {
            "description": "可以显示的标题，用于轻松识别产品变体。",
            "type": "string",
            "examples": [
              "Small"
            ]
          },
          "product_id": {
            "description": "产品变体所属产品的 ID。",
            "type": "string",
            "examples": [
              "prod_01G1G5V2MBA328390B5AXJ610F"
            ]
          },
          "product": {
            "description": "产品变体所属产品的详细信息。",
            "x-expandable": "product",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "sku": {
            "description": "用于标识产品变体的唯一库存单位。这通常是待发货商品的唯一标识符，并且可以在多个系统中引用。",
            "type": "string",
            "examples": [
              "shirt-123"
            ],
            "nullable": true
          },
          "barcode": {
            "description": "用于标识产品变体的 GTIN 编号的通用字段。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "ean": {
            "description": "可用于标识产品变体的 EAN 条形码编号。 Variant.",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "upc": {
            "description": "可用于标识产品变体的 UPC 条形码编号。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "variant_rank": {
            "description": "此变体的排名",
            "type": "number",
            "default": 0,
            "nullable": true
          },
          "inventory_quantity": {
            "description": "当前库存商品的数量。",
            "type": "integer",
            "examples": [
              100
            ]
          },
          "allow_backorder": {
            "description": "当 `inventory_quantity` 为 0 时，产品变体是否应该可以购买。",
            "type": "boolean",
            "default": false
          },
          "manage_inventory": {
            "description": "Medusa 是否应管理产品变体的库存。",
            "type": "boolean",
            "default": true
          },
          "hs_code": {
            "description": "产品变体的协调制度代码。配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "origin_country": {
            "description": "生产产品变体的国家/地区。配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "mid_code": {
            "description": "标识产品变体制造商的制造商识别码。配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "material": {
            "description": "产品变体的材料和成分，配送提供商可以使用它将海关信息传递给承运人。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "weight": {
            "description": "产品变体的重量。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "length": {
            "description": "产品变体的长度。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "height": {
            "description": "产品变体的高度。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "width": {
            "description": "产品变体的宽度。可用于运费计算。",
            "type": "number",
            "examples": [
              null
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "purchasable": {
            "description": "仅与库存模块一起使用。\n\n一个布尔值，指示产品变体是否可购买。\nA variant is purchasable if:\n  - inventory is not managed\n  - it has no inventory items\n  - it is in stock\n  - it is backorderable.\n",
            "type": "boolean"
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "options": {
            "description": "此产品变体为其定义值的产品选项的详细信息。",
            "type": "array",
            "x-expandable": "options",
            "items": {
              "$ref": "#/components/schemas/ProductOptionValue"
            }
          },
          "inventory_items": {
            "description": "产品变体的库存商品的详细信息。",
            "type": "array",
            "x-expandable": "inventory_items",
            "items": {
              "$ref": "#/components/schemas/ProductVariantInventoryItem"
            }
          },
          "prices": {
            "description": "产品变体价格的详细信息，每个价格都表示为货币金额。每个货币金额代表给定货币或特定地区的 价格。",
            "type": "array",
            "x-expandable": "prices",
            "items": {
              "$ref": "#/components/schemas/MoneyAmount"
            }
          }
        }
      },
      "MoneyAmount": {
        "title": "Money Amount",
        "description": "货币金额代表价格金额，例如，产品变体的价格或价格表中的价格。每个货币金额都与货币或地区相关联， 以指示给定货币中的定价，或者对于完全基于地区的定价，指示特定地区中的给定价格。如果使用基于地区的定价， 则金额将使用为该地区定义的货币。",
        "type": "object",
        "required": [
          "amount",
          "created_at",
          "currency_code",
          "deleted_at",
          "id",
          "max_quantity",
          "min_quantity",
          "price_list_id",
          "region_id",
          "updated_at",
          "variant_id"
        ],
        "properties": {
          "id": {
            "description": "货币金额的 ID",
            "type": "string",
            "examples": [
              "ma_01F0YESHRFQNH5S8Q0PK84YYZN"
            ]
          },
          "amount": {
            "description": "产品变体成本的最小货币单位的金额（例如，美分，100 美分相当于 1 美元）。",
            "type": "integer",
            "examples": [
              100
            ]
          },
          "min_quantity": {
            "description": "货币金额适用的最小数量。如果未设置此值，则货币金额适用于所有数量。",
            "type": "integer",
            "examples": [
              1
            ],
            "nullable": true
          },
          "max_quantity": {
            "description": "货币金额适用的最大数量。如果未设置此值，则货币金额适用于所有数量。",
            "type": "integer",
            "examples": [
              1
            ],
            "nullable": true
          },
          "price_list_id": {
            "description": "货币金额可能所属的价格表的 ID。",
            "type": "string",
            "examples": [
              "pl_01G8X3CKJXCG5VXVZ87H9KC09W"
            ],
            "nullable": true
          },
          "price_list": {
            "description": "货币金额可能所属的价格表的详细信息。",
            "x-expandable": "price_list",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "variant_id": {
            "description": "订单项中包含的产品变体的 ID。",
            "type": "string",
            "examples": [
              "variant_01G1G5V2MRX2V3PVSR2WXYPFB6"
            ],
            "nullable": true
          },
          "variant": {
            "description": "货币金额可能所属的产品变体的详细信息。",
            "x-expandable": "variant",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "region_id": {
            "description": "地区的 ID",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ],
            "nullable": true
          },
          "region": {
            "description": "货币金额可能所属的地区的详细信息。",
            "x-expandable": "region",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "currency_code": {
            "description": "货币金额可能所属的 3 个字符的货币代码。",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
              "description": "查看代码列表。"
            },
            "examples": [
              "usd"
            ]
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "Payment": {
        "title": "Payment",
        "description": "付款最初是从支付会话创建的。支付会话获得授权后，将创建付款以使用给定的付款方式表示授权金额。 付款可以捕获、取消或退款。付款可以针对订单、交换、订单编辑或其他资源进行。",
        "type": "object",
        "required": [
          "amount",
          "amount_refunded",
          "canceled_at",
          "captured_at",
          "cart_id",
          "created_at",
          "currency_code",
          "data",
          "id",
          "idempotency_key",
          "metadata",
          "order_id",
          "provider_id",
          "swap_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "付款的 ID",
            "type": "string",
            "examples": [
              "pay_01G2SJNT6DEEWDFNAJ4XWDTHKE"
            ]
          },
          "swap_id": {
            "description": "可能为此付款创建的交换的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "swap": {
            "description": "可能为此付款创建的交换的详细信息。",
            "x-expandable": "swap",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "cart_id": {
            "description": "可能为此支付会话创建的购物车的 ID。",
            "type": "string",
            "nullable": true
          },
          "cart": {
            "description": "可能为此支付会话创建的购物车的详细信息。",
            "x-expandable": "cart",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "order_id": {
            "description": "可能为此支付会话创建的订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ],
            "nullable": true
          },
          "order": {
            "description": "可能为此支付会话创建的订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "amount": {
            "description": "付款已授权的金额。",
            "type": "integer",
            "examples": [
              100
            ]
          },
          "amount_refunded": {
            "description": "已退还给客户的原始付款金额。",
            "type": "integer",
            "default": 0,
            "examples": [
              0
            ]
          },
          "provider_id": {
            "description": "负责付款的支付提供程序的 ID",
            "type": "string",
            "examples": [
              "manual"
            ]
          },
          "captured_at": {
            "description": "捕获付款的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "canceled_at": {
            "description": "取消付款的日期和时区。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "currency_code": {
            "description": "付款的 3 个字符的 ISO 货币代码。",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
              "description": "查看代码列表。"
            },
            "examples": [
              "usd"
            ]
          },
          "data": {
            "description": "支付提供程序识别、修改和处理付款所需的数据。通常，这将是一个保存外部支付会话 ID 的对象， 但如果支付提供程序不保存任何状态，则可以为空对象。",
            "type": "object",
            "examples": [
              {}
            ],
            "properties": {}
          },
          "idempotency_key": {
            "description": "随机生成的密钥，用于在发生故障时继续完成付款。",
            "type": "string",
            "externalDocs": {
              "url": "https://docs.medusajs.com/development/idempotency-key/overview.md",
              "description": "了解有关如何使用幂等性密钥的更多信息。"
            },
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "ShippingMethodTaxLine": {
        "title": "Shipping Method Tax Line",
        "description": "送货方式税行代表购物车中送货方式上应用的税费。",
        "type": "object",
        "required": [
          "code",
          "created_at",
          "id",
          "shipping_method_id",
          "metadata",
          "name",
          "rate",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "订单项税行的 ID",
            "type": "string",
            "examples": [
              "smtl_01G1G5V2DRX1SK6NQQ8VVX4HQ8"
            ]
          },
          "code": {
            "description": "用于标识税收类型的代码",
            "type": "string",
            "examples": [
              "tax01"
            ],
            "nullable": true
          },
          "name": {
            "description": "税收的人类友好名称",
            "type": "string",
            "examples": [
              "Tax Example"
            ]
          },
          "rate": {
            "description": "按数字税率征税",
            "type": "number",
            "examples": [
              10
            ]
          },
          "shipping_method_id": {
            "description": "订单项的 ID",
            "type": "string",
            "examples": [
              "sm_01F0YET7DR2E7CYVSDHM593QG2"
            ]
          },
          "shipping_method": {
            "description": "关联送货方式的详细信息。",
            "x-expandable": "shipping_method",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "LineItemTaxLine": {
        "title": "Line Item Tax Line",
        "description": "订单项税行代表订单项上应用的税费。",
        "type": "object",
        "required": [
          "code",
          "created_at",
          "id",
          "item_id",
          "metadata",
          "name",
          "rate",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "订单项税行的 ID",
            "type": "string",
            "examples": [
              "litl_01G1G5V2DRX1SK6NQQ8VVX4HQ8"
            ]
          },
          "code": {
            "description": "用于标识税收类型的代码",
            "type": "string",
            "examples": [
              "tax01"
            ],
            "nullable": true
          },
          "name": {
            "description": "税收的人类友好名称",
            "type": "string",
            "examples": [
              "Tax Example"
            ]
          },
          "rate": {
            "description": "按数字税率征税",
            "type": "number",
            "examples": [
              10
            ]
          },
          "item_id": {
            "description": "订单项的 ID",
            "type": "string",
            "examples": [
              "item_01G8ZC9GWT6B2GP5FSXRXNFNGN"
            ]
          },
          "item": {
            "description": "订单项的详细信息。",
            "x-expandable": "item",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "ProductOptionValue": {
        "title": "Product Option Value",
        "description": "选项值是产品选项的可能值之一。产品变体指定产品选项值的唯一组合。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "option_id",
          "updated_at",
          "value",
          "variant_id"
        ],
        "properties": {
          "id": {
            "description": "产品选项值的 ID",
            "type": "string",
            "examples": [
              "optval_01F0YESHR7S6ECD03RF6W12DSJ"
            ]
          },
          "value": {
            "description": "产品变体为特定产品选项定义的值（例如，如果产品选项是“尺寸”，则此值可以是 `Small`、`Medium`  或 `Large`）。",
            "type": "string",
            "examples": [
              "large"
            ]
          },
          "option_id": {
            "description": "产品选项值的所属产品选项的 ID。",
            "type": "string",
            "examples": [
              "opt_01F0YESHQBZVKCEXJ24BS6PCX3"
            ]
          },
          "option": {
            "description": "产品选项值的所属产品选项的详细信息。",
            "x-expandable": "option",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "variant_id": {
            "description": "使用此产品选项值的产品变体的 ID。",
            "type": "string",
            "examples": [
              "variant_01G1G5V2MRX2V3PVSR2WXYPFB6"
            ]
          },
          "variant": {
            "description": "使用此产品选项值的产品变体的详细信息。",
            "x-expandable": "variant",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "Learn about the metadata attribute, and how to delete and update it.",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "ProductVariantInventoryItem": {
        "title": "Product Variant Inventory Item",
        "description": "产品变体库存商品将变体与库存商品链接起来，并表示变体的所需数量。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "inventory_item_id",
          "required_quantity",
          "updated_at",
          "variant_id"
        ],
        "properties": {
          "id": {
            "description": "产品变体库存商品的 ID",
            "type": "string",
            "examples": [
              "pvitem_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ]
          },
          "inventory_item_id": {
            "description": "库存商品的 ID",
            "type": "string"
          },
          "variant_id": {
            "description": "变体的 ID。",
            "type": "string"
          },
          "variant": {
            "description": "产品变体的详细信息。",
            "x-expandable": "variant",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "required_quantity": {
            "description": "变体所需的库存商品数量。",
            "type": "integer",
            "default": 1
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ShippingProfile": {
        "title": "Shipping Profile",
        "description": "A Shipping Profile has a set of defined Shipping Options that can be used to fulfill a given set of Products. For example, gift cards are shipped differently than physical products, so a shipping profile with the type `gift_card` groups together the shipping options that can only be used for gift cards.",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "name",
          "type",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "送货方案的 ID",
            "type": "string",
            "examples": [
              "sp_01G1G5V239ENSZ5MV4JAR737BM"
            ]
          },
          "name": {
            "description": "送货方案的名称 - 这可能会显示给客户。",
            "type": "string",
            "examples": [
              "默认送货方案"
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "description": "送货方案的类型，可以是 `default`、`gift_card` 或 `custom`。",
            "type": "string",
            "enum": [
              "default",
              "gift_card",
              "custom"
            ],
            "examples": [
              "default"
            ]
          },
          "products": {
            "description": "送货方案为其定义送货选项的产品的详细信息。如果扩展了 `products` 关系，则可用。",
            "type": "array",
            "x-expandable": "products",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "shipping_options": {
            "description": "可用于为送货方案中的产品创建送货方式的送货选项的详细信息。",
            "type": "array",
            "x-expandable": "shipping_options",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "Image": {
        "title": "Image",
        "description": "图像用于存储有关上传图像的详细信息。图像由文件服务上传，URL 由文件服务提供。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "updated_at",
          "url"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "图像的 ID",
            "examples": [
              "img_01G749BFYR6T8JTVW6SGW3K3E6"
            ]
          },
          "url": {
            "description": "可以找到图像文件的 URL。",
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "StoreAuthRes": {
        "type": "object",
        "description": "客户的详细信息。",
        "required": [
          "customer"
        ],
        "x-expanded-relations": {
          "field": "customer",
          "relations": [
            "orders",
            "orders.items",
            "shipping_addresses"
          ]
        },
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "StoreCustomersRes": {
        "type": "object",
        "description": "客户的详细信息。",
        "required": [
          "customer"
        ],
        "x-expanded-relations": {
          "field": "customer",
          "relations": [
            "billing_address",
            "shipping_addresses"
          ]
        },
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "StoreCustomersResetPasswordRes": {
        "type": "object",
        "required": [
          "customer"
        ],
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "Customer": {
        "title": "Customer",
        "description": "客户可以在您的商店购物并管理他们的个人资料。",
        "type": "object",
        "required": [
          "billing_address_id",
          "created_at",
          "deleted_at",
          "email",
          "first_name",
          "has_account",
          "id",
          "last_name",
          "metadata",
          "phone",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "客户的 ID",
            "type": "string",
            "examples": [
              "cus_01G2SG30J8C85S4A5CHM2S1NS2"
            ]
          },
          "email": {
            "description": "客户的电子邮件",
            "type": "string",
            "format": "email"
          },
          "first_name": {
            "description": "客户的名字",
            "type": "string",
            "examples": [
              "Arno"
            ],
            "nullable": true
          },
          "last_name": {
            "description": "客户的姓氏",
            "type": "string",
            "examples": [
              "Willms"
            ],
            "nullable": true
          },
          "billing_address_id": {
            "description": "客户的账单地址 ID",
            "type": "string",
            "examples": [
              "addr_01G8ZH853YPY9B94857DY91YGW"
            ],
            "nullable": true
          },
          "phone": {
            "description": "客户的电话号码",
            "type": "string",
            "examples": [
              16128234334802
            ],
            "nullable": true
          },
          "has_account": {
            "description": "客户是否拥有帐户",
            "type": "boolean",
            "default": false
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "orders": {
            "description": "此客户下的订单的详细信息。",
            "type": "array",
            "x-expandable": "orders",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "groups": {
            "description": "客户所属的客户组。",
            "type": "array",
            "x-expandable": "groups",
            "items": {
              "$ref": "#/components/schemas/CustomerGroup"
            }
          },
          "shipping_addresses": {
            "description": "与客户关联的送货地址的详细信息。",
            "type": "array",
            "x-expandable": "shipping_addresses",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Address": {
        "title": "Address",
        "description": "地址在 Medusa 后端中的其他模式和对象类型中使用。例如，客户的账单地址和送货地址都使用地址实体。",
        "type": "object",
        "required": [
          "address_1",
          "address_2",
          "city",
          "company",
          "country_code",
          "created_at",
          "customer_id",
          "deleted_at",
          "first_name",
          "id",
          "last_name",
          "metadata",
          "phone",
          "postal_code",
          "province",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "地址的 ID",
            "examples": [
              "addr_01G8ZC9VS1XVE149MGH2J7QSSH"
            ]
          },
          "customer_id": {
            "description": "此地址所属客户的 ID",
            "type": "string",
            "examples": [
              "cus_01G2SG30J8C85S4A5CHM2S1NS2"
            ],
            "nullable": true
          },
          "customer": {
            "description": "如果扩展了 `customer` 关系，则可用。",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "company": {
            "description": "公司名称",
            "type": "string",
            "examples": [
              "Acme"
            ],
            "nullable": true
          },
          "first_name": {
            "description": "名",
            "type": "string",
            "examples": [
              "Arno"
            ],
            "nullable": true
          },
          "last_name": {
            "description": "姓",
            "type": "string",
            "examples": [
              "Willms"
            ],
            "nullable": true
          },
          "address_1": {
            "description": "地址行 1",
            "type": "string",
            "examples": [
              "14433 Kemmer Court"
            ],
            "nullable": true
          },
          "address_2": {
            "description": "地址行 2",
            "type": "string",
            "examples": [
              "Suite 369"
            ],
            "nullable": true
          },
          "city": {
            "description": "城市",
            "type": "string",
            "examples": [
              "South Geoffreyview"
            ],
            "nullable": true
          },
          "province": {
            "description": "省",
            "type": "string",
            "examples": [
              "Kentucky"
            ],
            "nullable": true
          },
          "postal_code": {
            "description": "邮政编码",
            "type": "string",
            "examples": [
              72093
            ],
            "nullable": true
          },
          "phone": {
            "description": "电话号码",
            "type": "string",
            "examples": [
              16128234334802
            ],
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "资源创建时间（含时区）。",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "资源更新时间（含时区）。",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "country_code": {
            "description": "国家/地区的 2 个字符的 ISO 代码（小写）",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            },
            "examples": [
              "st"
            ],
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "GiftCardTransaction": {
        "title": "Gift Card Transaction",
        "description": "客户使用礼品卡支付订单后，会创建礼品卡交易。",
        "type": "object",
        "required": [
          "amount",
          "created_at",
          "gift_card_id",
          "id",
          "is_taxable",
          "order_id",
          "tax_rate"
        ],
        "properties": {
          "id": {
            "description": "礼品卡交易的 ID",
            "type": "string",
            "examples": [
              "gct_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ]
          },
          "gift_card_id": {
            "description": "交易中使用的礼品卡的 ID。",
            "type": "string",
            "examples": [
              "gift_01G8XKBPBQY2R7RBET4J7E0XQZ"
            ]
          },
          "gift_card": {
            "description": "此交易中使用的礼品卡的详细信息。",
            "x-expandable": "gift_card",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "order_id": {
            "description": "使用礼品卡付款的订单的 ID。",
            "type": "string",
            "examples": [
              "order_01G8TJSYT9M6AVS5N4EMNFS1EK"
            ]
          },
          "order": {
            "description": "使用礼品卡付款的订单的详细信息。",
            "x-expandable": "order",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "amount": {
            "description": "从礼品卡中使用的金额。",
            "type": "integer",
            "examples": [
              10
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "is_taxable": {
            "description": "交易是否应纳税。",
            "type": "boolean",
            "examples": [
              false
            ],
            "nullable": true
          },
          "tax_rate": {
            "description": "交易的税率",
            "type": "number",
            "examples": [
              0
            ],
            "nullable": true
          }
        }
      },
      "CustomerGroup": {
        "title": "Customer Group",
        "description": "客户组，可用于将客户组织成具有相似特征的组。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "name",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "客户组的 ID",
            "type": "string",
            "examples": [
              "cgrp_01G8ZH853Y6TFXWPG5EYE81X63"
            ]
          },
          "name": {
            "description": "客户组的名称",
            "type": "string",
            "examples": [
              "VIP"
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "customers": {
            "description": "属于客户组的客户的详细信息。",
            "type": "array",
            "x-expandable": "customers",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "price_lists": {
            "description": "与客户组关联的价格表。",
            "type": "array",
            "x-expandable": "price_lists",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "TaxProvider": {
        "title": "Tax Provider",
        "description": "税费提供程序表示安装在 Medusa 后端中的税费服务，可以通过插件或后端自定义安装。它保存税费服务的 安装状态。",
        "type": "object",
        "required": [
          "id",
          "is_installed"
        ],
        "properties": {
          "id": {
            "description": "税费服务提供的税费提供程序的 ID。",
            "type": "string",
            "examples": [
              "manual"
            ]
          },
          "is_installed": {
            "description": "税费服务是否安装在当前版本中。如果不再安装税费服务，则 `is_installed` 属性设置为 `false`。",
            "type": "boolean",
            "default": true
          }
        }
      },
      "PaymentProvider": {
        "title": "Payment Provider",
        "description": "支付提供程序表示安装在 Medusa 后端中的支付服务，可以通过插件或后端自定义安装。它保存支付服务的 安装状态。",
        "type": "object",
        "required": [
          "id",
          "is_installed"
        ],
        "properties": {
          "id": {
            "description": "支付服务提供的支付提供程序的 ID。",
            "type": "string",
            "examples": [
              "manual"
            ]
          },
          "is_installed": {
            "description": "支付服务是否安装在当前版本中。如果不再安装支付服务，则 `is_installed` 属性设置为 `false`。",
            "type": "boolean",
            "default": true
          }
        }
      },
      "Currency": {
        "title": "Currency",
        "description": "货币",
        "type": "object",
        "required": [
          "code",
          "name",
          "symbol",
          "symbol_native"
        ],
        "properties": {
          "symbol": {
            "description": "用于指示货币的符号。",
            "type": "string",
            "examples": [
              "$"
            ]
          },
          "symbol_native": {
            "description": "用于指示货币的本地符号。",
            "type": "string",
            "examples": [
              "$"
            ]
          },
          "name": {
            "description": "货币的书面名称",
            "type": "string",
            "examples": [
              "US Dollar"
            ]
          },
          "includes_tax": {
            "description": "货币价格是否包含税费",
            "type": "boolean",
            "x-featureFlag": "tax_inclusive_pricing",
            "default": false
          },
          "code": {
            "description": "货币的 3 个字符的 ISO 代码。",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
              "description": "查看代码列表。"
            },
            "examples": [
              "usd"
            ]
          }
        }
      },
      "Country": {
        "title": "Country",
        "description": "国家/地区详细信息",
        "type": "object",
        "required": [
          "display_name",
          "id",
          "iso_2",
          "iso_3",
          "name",
          "num_code",
          "region_id"
        ],
        "properties": {
          "id": {
            "description": "国家/地区的 ID",
            "type": "string",
            "examples": [
              109
            ]
          },
          "name": {
            "description": "标准化国家/地区名称（大写）。",
            "type": "string",
            "examples": [
              "ITALY"
            ]
          },
          "display_name": {
            "description": "适合显示的国家/地区名称。",
            "type": "string",
            "examples": [
              "Italy"
            ]
          },
          "region_id": {
            "description": "此国家/地区关联的地区 ID。",
            "type": "string",
            "examples": [
              "reg_01G1G5V26T9H8Y0M4JNE3YGA4G"
            ],
            "nullable": true
          },
          "region": {
            "description": "国家/地区关联的地区的详细信息。",
            "x-expandable": "region",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "iso_2": {
            "description": "国家/地区的 2 个字符的 ISO 代码（小写）",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            },
            "examples": [
              "it"
            ]
          },
          "iso_3": {
            "description": "国家/地区的 2 个字符的 ISO 代码（小写）",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            },
            "examples": [
              "ita"
            ]
          },
          "num_code": {
            "description": "国家/地区的数字 ISO 代码。",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_numeric#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            },
            "examples": [
              380
            ]
          }
        }
      },
      "FulfillmentProvider": {
        "title": "Fulfillment Provider",
        "description": "配送提供程序表示安装在 Medusa 后端中的配送服务，可以通过插件或后端自定义安装。它保存配送服务的 安装状态。",
        "type": "object",
        "required": [
          "id",
          "is_installed"
        ],
        "properties": {
          "id": {
            "description": "配送服务提供的配送提供程序的 ID。 service.",
            "type": "string",
            "examples": [
              "manual"
            ]
          },
          "is_installed": {
            "description": "配送服务是否安装在当前版本中。如果不再安装配送服务，则 `is_installed` 属性设置为 `false`。",
            "type": "boolean",
            "default": true
          }
        }
      },
      "StoreCollectionsRes": {
        "type": "object",
        "description": "产品集合的详细信息。",
        "required": [
          "collection"
        ],
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/ProductCollection"
          }
        }
      },
      "MultipleErrors": {
        "title": "Multiple Errors",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "default": "提供的请求正文包含错误。请检查数据并重试请求"
          },
          "errors": {
            "type": "array",
            "description": "错误数组",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "StorePostReturnsReq": {
        "type": "object",
        "required": [
          "order_id",
          "items"
        ],
        "properties": {
          "order_id": {
            "type": "string",
            "description": "要为其创建退货的订单的 ID。"
          },
          "return_shipping": {
            "description": "用于退回商品的退货送货方式。如果提供，则会自动为退货创建配送。",
            "type": "object",
            "required": [
              "option_id"
            ],
            "properties": {
              "option_id": {
                "type": "string",
                "description": "从中创建送货方式的送货选项的 ID。"
              }
            }
          },
          "items": {
            "description": "要包含在退货中的商品。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "item_id",
                "quantity"
              ],
              "properties": {
                "item_id": {
                  "description": "要退回的订单项的 ID。",
                  "type": "string"
                },
                "quantity": {
                  "description": "要退回的数量。",
                  "type": "integer"
                },
                "reason_id": {
                  "description": "退货原因的 ID。可以从列出退货原因 API 路由检索退货原因。",
                  "type": "string"
                },
                "note": {
                  "description": "要添加到退回商品的注释。",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "StoreProductTagsListRes": {
        "type": "object",
        "description": "产品标签列表，包含分页字段。",
        "required": [
          "product_tags",
          "count",
          "offset",
          "limit"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "可用的项目总数"
          },
          "offset": {
            "type": "integer",
            "description": "检索产品标签时跳过的产品标签数量。"
          },
          "limit": {
            "type": "integer",
            "description": "每页的项目数"
          },
          "product_tags": {
            "type": "array",
            "description": "产品标签详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        }
      },
      "ProductTag": {
        "title": "Product Tag",
        "description": "可以将产品标签添加到产品中以便于过滤和分组。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "updated_at",
          "value"
        ],
        "properties": {
          "id": {
            "description": "产品标签的 ID",
            "type": "string",
            "examples": [
              "ptag_01G8K2MTMG9168F2B70S1TAVK3"
            ]
          },
          "value": {
            "description": "产品标签代表的值",
            "type": "string",
            "examples": [
              "Pants"
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "StorePostCustomersCustomerReq": {
        "type": "object",
        "properties": {
          "first_name": {
            "description": "客户的名字。",
            "type": "string"
          },
          "last_name": {
            "description": "客户的姓氏。",
            "type": "string"
          },
          "password": {
            "description": "客户的密码。",
            "type": "string"
          },
          "phone": {
            "description": "客户的电话号码。",
            "type": "string"
          },
          "email": {
            "description": "客户的电子邮件。",
            "type": "string"
          },
          "metadata": {
            "description": "有关客户的其他自定义数据。",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。 it.",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "properties": {}
          },
          "billing_address": {
            "description": "用于账单目的的地址。",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AddressPayload"
              },
              {
                "type": "string",
                "description": "现有账单地址的 ID"
              }
            ]
          }
        }
      },
      "StorePostCustomersCustomerAddressesAddressReq": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/AddressPayload"
          }
        ]
      },
      "StorePostCartsCartReq": {
        "type": "object",
        "properties": {
          "region_id": {
            "type": "string",
            "description": "要在其中创建购物车的地区的 ID。设置购物车的地区会影响购物车中商品的定价以及使用的货币。"
          },
          "email": {
            "type": "string",
            "description": "要在购物车上使用的电子邮件。",
            "format": "email"
          },
          "sales_channel_id": {
            "type": "string",
            "description": "The ID of the Sales channel to create the Cart in. The cart's sales channel affects which products can be added to the cart. If a product does not exist in the cart's sales channel, it cannot be added to the cart. If you add a publishable API key in the header of this request and specify a sales channel ID, the specified sales channel must be within the scope of the publishable API key's resources."
          },
          "customer_id": {
            "description": "要与购物车关联的客户的 ID。",
            "type": "string"
          },
          "country_code": {
            "type": "string",
            "description": "要在其中创建购物车的 2 个字符的 ISO 国家/地区代码。设置此参数将设置送货地址的国家/地区代码。",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            }
          },
          "context": {
            "description": "一个对象，用于为购物车提供上下文。`context` 字段会自动填充 `ip` 和 `user_agent`",
            "type": "object",
            "examples": [
              {
                "ip": "::1",
                "user_agent": "Chrome"
              }
            ],
            "properties": {}
          },
          "gift_cards": {
            "description": "要添加到购物车的礼品卡代码数组。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "description": "礼品卡的代码。",
                  "type": "string"
                }
              }
            }
          },
          "discounts": {
            "description": "要添加到购物车的折扣代码数组。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "description": "折扣的代码。",
                  "type": "string"
                }
              }
            }
          },
          "billing_address": {
            "description": "用于账单目的的地址。",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AddressPayload"
              },
              {
                "type": "string",
                "description": "账单地址 ID"
              }
            ]
          },
          "shipping_address": {
            "description": "用于送货目的的地址。",
            "anyOf": [
              {
                "$ref": "#/components/schemas/AddressPayload"
              },
              {
                "type": "string",
                "description": "送货地址 ID"
              }
            ]
          }
        }
      },
      "StorePostCustomersCustomerAddressesReq": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressCreatePayload"
          }
        }
      },
      "AddressCreatePayload": {
        "type": "object",
        "description": "创建地址时使用的地址字段。",
        "required": [
          "first_name",
          "last_name",
          "address_1",
          "city",
          "country_code",
          "postal_code"
        ],
        "properties": {
          "first_name": {
            "description": "名",
            "type": "string",
            "examples": [
              "Arno"
            ]
          },
          "last_name": {
            "description": "姓",
            "type": "string",
            "examples": [
              "Willms"
            ]
          },
          "phone": {
            "type": "string",
            "description": "电话号码",
            "examples": [
              16128234334802
            ]
          },
          "company": {
            "type": "string"
          },
          "address_1": {
            "description": "地址行 1",
            "type": "string",
            "examples": [
              "14433 Kemmer Court"
            ]
          },
          "address_2": {
            "description": "地址行 2",
            "type": "string",
            "examples": [
              "Suite 369"
            ]
          },
          "city": {
            "description": "城市",
            "type": "string",
            "examples": [
              "South Geoffreyview"
            ]
          },
          "province": {
            "description": "省",
            "type": "string",
            "examples": [
              "Kentucky"
            ]
          },
          "postal_code": {
            "description": "邮政编码",
            "type": "string",
            "examples": [
              72093
            ]
          },
          "country_code": {
            "description": "国家/地区的 2 个字符的 ISO 代码（小写）",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            },
            "examples": [
              "st"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "包含其他详细信息的可选键值映射",
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {}
          }
        }
      },
      "AddressPayload": {
        "type": "object",
        "description": "创建/更新地址时使用的地址字段。",
        "properties": {
          "first_name": {
            "description": "名",
            "type": "string",
            "examples": [
              "Arno"
            ]
          },
          "last_name": {
            "description": "姓",
            "type": "string",
            "examples": [
              "Willms"
            ]
          },
          "phone": {
            "type": "string",
            "description": "电话号码",
            "examples": [
              16128234334802
            ]
          },
          "company": {
            "type": "string",
            "description": "公司"
          },
          "address_1": {
            "description": "地址行 1",
            "type": "string",
            "examples": [
              "14433 Kemmer Court"
            ]
          },
          "address_2": {
            "description": "地址行 2",
            "type": "string",
            "examples": [
              "Suite 369"
            ]
          },
          "city": {
            "description": "城市",
            "type": "string",
            "examples": [
              "South Geoffreyview"
            ]
          },
          "province": {
            "description": "省",
            "type": "string",
            "examples": [
              "Kentucky"
            ]
          },
          "postal_code": {
            "description": "邮政编码",
            "type": "string",
            "examples": [
              72093
            ]
          },
          "country_code": {
            "description": "国家/地区的 2 个字符的 ISO 代码（小写）",
            "type": "string",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            },
            "examples": [
              "st"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "包含其他详细信息的可选键值映射",
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {}
          }
        }
      },
      "StoreReturnReasonsRes": {
        "type": "object",
        "description": "退货原因的详细信息。",
        "required": [
          "return_reason"
        ],
        "x-expanded-relations": {
          "field": "return_reason",
          "relations": [
            "parent_return_reason",
            "return_reason_children"
          ]
        },
        "properties": {
          "return_reason": {
            "$ref": "#/components/schemas/ReturnReason"
          }
        }
      },
      "StoreReturnReasonsListRes": {
        "type": "object",
        "description": "退货原因列表。",
        "required": [
          "return_reasons"
        ],
        "x-expanded-relations": {
          "field": "return_reasons",
          "relations": [
            "parent_return_reason",
            "return_reason_children"
          ]
        },
        "properties": {
          "return_reasons": {
            "type": "array",
            "description": "退货原因详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/ReturnReason"
            }
          }
        }
      },
      "ReturnReason": {
        "title": "Return Reason",
        "description": "退货原因是由管理员定义的值。它可以用于退货商品，以指示退回订单项的原因。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "description",
          "id",
          "label",
          "metadata",
          "parent_return_reason_id",
          "updated_at",
          "value"
        ],
        "properties": {
          "id": {
            "description": "退货原因的 ID",
            "type": "string",
            "examples": [
              "rr_01G8X82GCCV2KSQHDBHSSAH5TQ"
            ]
          },
          "value": {
            "description": "用于标识原因的值。",
            "type": "string",
            "examples": [
              "damaged"
            ]
          },
          "label": {
            "description": "可以向客户显示为原因的文本。",
            "type": "string",
            "examples": [
              "Damaged goods"
            ]
          },
          "description": {
            "description": "原因的描述。",
            "type": "string",
            "examples": [
              "Items that are damaged"
            ],
            "nullable": true
          },
          "parent_return_reason_id": {
            "description": "父原因的 ID。",
            "type": "string",
            "examples": [
              null
            ],
            "nullable": true
          },
          "parent_return_reason": {
            "description": "父原因的详细信息。",
            "x-expandable": "parent_return_reason",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "return_reason_children": {
            "description": "子原因的详细信息。",
            "x-expandable": "return_reason_children",
            "type": "object",
            "properties": {}
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "StoreProductTypesListRes": {
        "type": "object",
        "required": [
          "product_types",
          "count",
          "offset",
          "limit"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "可用的项目总数"
          },
          "offset": {
            "type": "integer",
            "description": "检索产品类型时跳过的产品类型数量。"
          },
          "limit": {
            "type": "integer",
            "description": "每页的项目数"
          },
          "product_types": {
            "type": "array",
            "description": "产品类型详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/ProductType"
            }
          }
        }
      },
      "ProductType": {
        "title": "Product Type",
        "description": "可以将产品类型添加到产品中以进行过滤和报告。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "id",
          "metadata",
          "updated_at",
          "value"
        ],
        "properties": {
          "id": {
            "description": "产品类型的 ID",
            "type": "string",
            "examples": [
              "ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A"
            ]
          },
          "value": {
            "description": "产品类型代表的值。",
            "type": "string",
            "examples": [
              "Clothing"
            ]
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "StoreCollectionsListRes": {
        "type": "object",
        "description": "产品集合列表，包含分页字段。",
        "required": [
          "collections",
          "count",
          "offset",
          "limit"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "可用的项目总数"
          },
          "offset": {
            "type": "integer",
            "description": "检索产品集合时跳过的产品集合数量。"
          },
          "limit": {
            "type": "integer",
            "description": "每页的项目数"
          },
          "collections": {
            "type": "array",
            "description": "产品集合详细信息数组",
            "items": {
              "$ref": "#/components/schemas/ProductCollection"
            }
          }
        }
      },
      "ProductCollection": {
        "title": "Product Collection",
        "description": "产品集合允许将产品组合在一起以进行促销。例如，管理员可以创建一个夏季系列，将产品添加到其中，并在店面展示它。",
        "type": "object",
        "required": [
          "created_at",
          "deleted_at",
          "handle",
          "id",
          "metadata",
          "title",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "产品集合的 ID",
            "type": "string",
            "examples": [
              "pcol_01F0YESBFAZ0DV6V831JXWH0BG"
            ]
          },
          "title": {
            "description": "产品集合的标识标题。",
            "type": "string",
            "examples": [
              "Summer Collection"
            ]
          },
          "handle": {
            "description": "标识产品集合的唯一字符串 - 例如，可用于 slug 结构中。",
            "type": "string",
            "examples": [
              "summer-collection"
            ],
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "description": "资源删除时间（含时区）。",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "products": {
            "description": "属于此产品集合的产品的详细信息。",
            "type": "array",
            "x-expandable": "products",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "StoreGetProductCategoriesRes": {
        "type": "object",
        "description": "产品类别列表，包含分页字段。",
        "required": [
          "product_categories",
          "count",
          "offset",
          "limit"
        ],
        "x-expanded-relations": {
          "field": "product_categories",
          "relations": [
            "category_children",
            "parent_category"
          ]
        },
        "properties": {
          "count": {
            "type": "integer",
            "description": "可用的项目总数"
          },
          "offset": {
            "type": "integer",
            "description": "检索产品类别时跳过的产品类别数量。"
          },
          "limit": {
            "type": "integer",
            "description": "每页的项目数"
          },
          "product_categories": {
            "type": "array",
            "description": "产品类别详细信息数组。",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          }
        }
      },
      "StorePostCartsCartPaymentSessionUpdateReq": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "用于更新支付会话的数据。",
            "properties": {}
          }
        }
      },
      "StoreGetProductCategoriesCategoryRes": {
        "type": "object",
        "description": "产品类别的详细信息。",
        "required": [
          "product_category"
        ],
        "x-expanded-relations": {
          "field": "product_category",
          "relations": [
            "category_children",
            "parent_category"
          ]
        },
        "properties": {
          "product_category": {
            "$ref": "#/components/schemas/ProductCategory"
          }
        }
      },
      "ProductCategory": {
        "title": "Product Category",
        "description": "产品类别可用于将产品分类到类别层次结构中。",
        "x-resourceId": "ProductCategory",
        "x-featureFlag": "product_categories",
        "type": "object",
        "required": [
          "category_children",
          "created_at",
          "handle",
          "id",
          "is_active",
          "is_internal",
          "metadata",
          "mpath",
          "name",
          "parent_category_id",
          "updated_at"
        ],
        "properties": {
          "id": {
            "description": "产品类别的 ID",
            "type": "string",
            "examples": [
              "pcat_01G2SG30J8C85S4A5CHM2S1NS2"
            ]
          },
          "name": {
            "description": "产品类别的名称",
            "type": "string",
            "examples": [
              "Regular Fit"
            ]
          },
          "description": {
            "description": "产品类别的描述。",
            "type": "string",
            "default": ""
          },
          "handle": {
            "description": "标识产品类别的唯一字符串 - 例如，可用于 slug 结构中。",
            "type": "string",
            "examples": [
              "regular-fit"
            ]
          },
          "mpath": {
            "description": "物化路径的字符串 - 用于查找祖先和后代",
            "type": "string",
            "examples": [
              "pcat_id1.pcat_id2.pcat_id3"
            ],
            "nullable": true
          },
          "is_internal": {
            "type": "boolean",
            "description": "一个标志，使产品类别成为管理员的内部类别",
            "default": false
          },
          "is_active": {
            "type": "boolean",
            "description": "一个标志，使产品类别在店面中可见/隐藏",
            "default": false
          },
          "rank": {
            "type": "integer",
            "description": "一个整数，描述类别在树节点中的排名",
            "default": 0
          },
          "parent_category_id": {
            "description": "父类别的 ID。",
            "type": "string",
            "default": null,
            "nullable": true
          },
          "parent_category": {
            "description": "此类别的父级的详细信息。",
            "x-expandable": "parent_category",
            "type": "object",
            "properties": {},
            "nullable": true
          },
          "created_at": {
            "description": "资源创建时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "资源更新时间（含时区）。",
            "type": "string",
            "format": "date-time"
          },
          "category_children": {
            "description": "类别子项的详细信息。",
            "type": "array",
            "x-expandable": "category_children",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "products": {
            "description": "属于此类别的产品的详细信息。",
            "type": "array",
            "x-expandable": "products",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "metadata": {
            "description": "包含其他详细信息的可选键值映射",
            "type": "object",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "examples": [
              {
                "car": "white"
              }
            ],
            "properties": {},
            "nullable": true
          }
        }
      },
      "Error": {
        "title": "Response Error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "发生的错误的描述。",
            "examples": [
              "first_name must be a string"
            ]
          },
          "code": {
            "type": "string",
            "description": "用于指示错误类型的代码。",
            "enum": [
              "invalid_state_error",
              "invalid_request_error",
              "api_error",
              "unknown_error"
            ]
          },
          "type": {
            "type": "string",
            "description": "指示错误类型的代码。",
            "enum": [
              "QueryRunnerAlreadyReleasedError",
              "TransactionAlreadyStartedError",
              "TransactionNotStartedError",
              "conflict",
              "unauthorized",
              "payment_authorization_error",
              "duplicate_error",
              "not_allowed",
              "invalid_data",
              "not_found",
              "database_error",
              "unexpected_state",
              "invalid_argument",
              "unknown_error"
            ]
          }
        }
      },
      "StorePostSearchRes": {
        "description": "搜索结果列表。",
        "allOf": [
          {
            "type": "object",
            "required": [
              "hits"
            ],
            "properties": {
              "hits": {
                "description": "搜索结果数组。商品的格式取决于安装在 Medusa 后端上的搜索引擎。",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {}
          }
        ]
      },
      "StoreCustomersListPaymentMethodsRes": {
        "type": "object",
        "description": "支付方式的详细信息。",
        "required": [
          "payment_methods"
        ],
        "properties": {
          "payment_methods": {
            "type": "array",
            "description": "保存的支付方式的详细信息。",
            "items": {
              "type": "object",
              "required": [
                "provider_id",
                "data"
              ],
              "properties": {
                "provider_id": {
                  "description": "保存支付方式的支付提供程序的 ID。",
                  "type": "string"
                },
                "data": {
                  "description": "支付提供程序使用保存的支付方式所需的数据。",
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "StorePostSearchReq": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "description": "搜索查询。"
          },
          "offset": {
            "type": "number",
            "description": "检索产品时要跳过的产品数量。"
          },
          "limit": {
            "type": "number",
            "description": "限制返回的产品数量。"
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "StorePostCartsCartLineItemsReq": {
        "type": "object",
        "required": [
          "variant_id",
          "quantity"
        ],
        "properties": {
          "variant_id": {
            "type": "string",
            "description": "用于生成订单项的产品变体的 ID。"
          },
          "quantity": {
            "type": "number",
            "description": "要添加到订单项的产品变体的数量。"
          },
          "metadata": {
            "type": "object",
            "description": "包含有关订单项的其他详细信息的可选键值映射。",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "properties": {}
          }
        }
      },
      "StorePostCartsCartPaymentSessionReq": {
        "type": "object",
        "required": [
          "provider_id"
        ],
        "properties": {
          "provider_id": {
            "type": "string",
            "description": "支付提供程序的 ID。"
          }
        }
      },
      "StorePaymentCollectionSessionsReq": {
        "type": "object",
        "required": [
          "provider_id"
        ],
        "properties": {
          "provider_id": {
            "type": "string",
            "description": "支付提供程序的 ID。"
          }
        }
      },
      "StorePostAuthReq": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "客户的电子邮件。"
          },
          "password": {
            "type": "string",
            "description": "客户的密码。"
          }
        }
      },
      "StorePostPaymentCollectionsBatchSessionsReq": {
        "type": "object",
        "required": [
          "sessions"
        ],
        "properties": {
          "sessions": {
            "description": "与付款集合相关的支付会话。未在此数组中添加的现有会话将被删除。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "provider_id",
                "amount"
              ],
              "properties": {
                "provider_id": {
                  "type": "string",
                  "description": "支付提供程序的 ID。"
                },
                "amount": {
                  "type": "integer",
                  "description": "付款金额"
                },
                "session_id": {
                  "type": "string",
                  "description": "要更新的支付会话的 ID。如果没有提供 ID，则会创建一个新的支付会话。"
                }
              }
            }
          }
        }
      },
      "StorePostCustomersReq": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "password"
        ],
        "properties": {
          "first_name": {
            "description": "客户的名字。",
            "type": "string"
          },
          "last_name": {
            "description": "客户的姓氏。",
            "type": "string"
          },
          "email": {
            "description": "客户的电子邮件。",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "客户的密码。",
            "type": "string",
            "format": "password"
          },
          "phone": {
            "description": "客户的电话号码。",
            "type": "string"
          }
        }
      },
      "StorePostPaymentCollectionsBatchSessionsAuthorizeReq": {
        "type": "object",
        "required": [
          "session_ids"
        ],
        "properties": {
          "session_ids": {
            "description": "要授权的支付会话 ID 列表。",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StoreBearerAuthRes": {
        "type": "object",
        "description": "访问令牌详细信息。",
        "properties": {
          "access_token": {
            "description": "可用于发送经过身份验证的请求的访问令牌。",
            "type": "string"
          }
        }
      },
      "StorePostCustomersResetPasswordReq": {
        "type": "object",
        "required": [
          "email",
          "password",
          "token"
        ],
        "properties": {
          "email": {
            "description": "客户的电子邮件。",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "客户的密码。",
            "type": "string",
            "format": "password"
          },
          "token": {
            "description": "重置密码令牌",
            "type": "string"
          }
        }
      },
      "StorePostOrderEditsOrderEditDecline": {
        "type": "object",
        "properties": {
          "declined_reason": {
            "type": "string",
            "description": "拒绝订单编辑的原因。"
          }
        }
      },
      "StorePostCustomersCustomerPasswordTokenReq": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "客户的电子邮件。",
            "type": "string",
            "format": "email"
          }
        }
      },
      "StorePostCustomersCustomerAcceptClaimReq": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "先前对声明订单 API 路由的请求生成的声明令牌。",
            "type": "string"
          }
        }
      },
      "StorePostCustomersCustomerOrderClaimReq": {
        "type": "object",
        "required": [
          "order_ids"
        ],
        "properties": {
          "order_ids": {
            "description": "要声明的订单的 ID",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StorePostCartsCartShippingMethodReq": {
        "type": "object",
        "required": [
          "option_id"
        ],
        "properties": {
          "option_id": {
            "type": "string",
            "description": "要从中创建方法的送货选项的 ID。"
          },
          "data": {
            "type": "object",
            "description": "用于保存送货方式处理订单配送可能需要的任何数据。这取决于您使用的配送提供程序。",
            "properties": {}
          }
        }
      },
      "StoreGetAuthEmailRes": {
        "type": "object",
        "description": "有关电子邮件是否存在的详细信息。",
        "required": [
          "exists"
        ],
        "properties": {
          "exists": {
            "description": "电子邮件是否存在。",
            "type": "boolean"
          }
        }
      },
      "StorePostCartsCartLineItemsItemReq": {
        "type": "object",
        "required": [
          "quantity"
        ],
        "properties": {
          "quantity": {
            "type": "number",
            "description": "购物车中订单项的数量。"
          },
          "metadata": {
            "type": "object",
            "description": "包含有关订单项的其他详细信息的可选键值映射。如果省略，元数据将保持不变。”",
            "externalDocs": {
              "description": "了解元数据属性，以及如何删除和更新它。",
              "url": "https://docs.medusajs.com/development/entities/overview#metadata-attribute"
            },
            "properties": {}
          }
        }
      },
      "StorePostCartReq": {
        "type": "object",
        "description": "要创建的购物车的详细信息。",
        "properties": {
          "region_id": {
            "type": "string",
            "description": "要在其中创建购物车的地区的 ID。设置购物车的地区会影响购物车中商品的定价以及使用的货币。如果未提供此参数，则默认使用商店中的第一个地区。"
          },
          "sales_channel_id": {
            "type": "string",
            "description": "The ID of the Sales channel to create the Cart in. The cart's sales channel affects which products can be added to the cart. If a product does not exist in the cart's sales channel, it cannot be added to the cart. If you add a publishable API key in the header of this request and specify a sales channel ID, the specified sales channel must be within the scope of the publishable API key's resources. If you add a publishable API key in the header of this request, you don't specify a sales channel ID, and the publishable API key is associated with one sales channel, that sales channel will be attached to the cart. If no sales channel is passed and no publishable API key header is passed or the publishable API key isn't associated with any sales channel, the cart will not be associated with any sales channel."
          },
          "country_code": {
            "type": "string",
            "description": "要在其中创建购物车的两个字符的 ISO 国家/地区代码。设置此参数将设置送货地址的国家/地区代码。",
            "externalDocs": {
              "url": "https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements",
              "description": "查看代码列表。"
            }
          },
          "context": {
            "description": "一个对象，用于为购物车提供上下文。`context` 字段会自动填充 `ip` 和 `user_agent`",
            "type": "object",
            "examples": [
              {
                "ip": "::1",
                "user_agent": "Chrome"
              }
            ],
            "properties": {}
          },
          "items": {
            "description": "用于生成订单项的产品变体数组。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "variant_id",
                "quantity"
              ],
              "properties": {
                "variant_id": {
                  "description": "产品变体的 ID。",
                  "type": "string"
                },
                "quantity": {
                  "description": "要添加到购物车中的数量。",
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "StorePostSwapsReq": {
        "type": "object",
        "required": [
          "order_id",
          "return_items",
          "additional_items"
        ],
        "properties": {
          "order_id": {
            "type": "string",
            "description": "要为其创建交换的订单的 ID。"
          },
          "return_shipping_option": {
            "type": "string",
            "description": "要从中创建送货方式的送货选项的 ID。"
          },
          "additional_items": {
            "description": "要与退回商品交换的商品。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "variant_id",
                "quantity"
              ],
              "properties": {
                "variant_id": {
                  "description": "产品变体的 ID。",
                  "type": "string"
                },
                "quantity": {
                  "description": "变体的数量。",
                  "type": "integer"
                }
              }
            }
          },
          "return_items": {
            "description": "要包含在退货中的商品。",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "item_id",
                "quantity"
              ],
              "properties": {
                "item_id": {
                  "description": "要退回的订单的订单项的 ID。",
                  "type": "string"
                },
                "quantity": {
                  "description": "要退回的数量。",
                  "type": "integer"
                },
                "reason_id": {
                  "description": "此退货原因的 ID。可以从列出退货原因 API 路由检索退货原因。",
                  "type": "string"
                },
                "note": {
                  "description": "要添加到正在交换的商品的注释。",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "title": "分类ID"
          },
          "name": {
            "type": "string",
            "title": "分类名"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "title": "标签名"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "ApiResponseSuccess": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApiResponseFailure": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "errorCode": {
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "用户ID"
          },
          "gender": {
            "type": "string",
            "title": "性别"
          },
          "username": {
            "type": "string",
            "title": "用户"
          },
          "email": {
            "type": "string",
            "title": "邮箱"
          },
          "phone": {
            "type": "string",
            "title": "手机号"
          },
          "status": {
            "type": "string",
            "enum": [
              "normal",
              "disabled"
            ],
            "title": "账号状态"
          },
          "createdAt": {
            "type": "string",
            "title": "创建时间"
          },
          "age": {
            "type": "integer",
            "title": "年龄"
          },
          "birthday": {
            "type": "string",
            "title": "生日"
          },
          "registerIp": {
            "type": "string",
            "title": "注册IP"
          },
          "isVip": {
            "type": "boolean",
            "title": "是否VIP会员"
          },
          "avatar": {
            "type": "string",
            "title": "头像"
          },
          "city": {
            "type": "string",
            "title": "城市"
          },
          "img": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        },
        "required": [
          "createdAt",
          "age",
          "birthday",
          "registerIp",
          "isVip",
          "avatar",
          "city",
          "img",
          "gender"
        ]
      },
      "VipUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "用户ID",
            "description": "用户的唯一标识符"
          },
          "gender": {
            "type": "string",
            "title": "性别",
            "enum": [
              "male",
              "female",
              "unknown"
            ],
            "description": "用户的性别信息"
          },
          "username": {
            "type": "string",
            "title": "用户名",
            "description": "用户的登录名称"
          },
          "email": {
            "type": "string",
            "title": "邮箱",
            "description": "用户的电子邮箱地址"
          },
          "phone": {
            "type": "string",
            "title": "手机号",
            "description": "用户的手机号码"
          },
          "status": {
            "type": "string",
            "enum": [
              "normal",
              "disabled"
            ],
            "title": "账号状态",
            "description": "用户账号的当前状态"
          },
          "createdAt": {
            "type": "string",
            "title": "创建时间",
            "description": "用户账号的创建时间"
          },
          "age": {
            "type": "integer",
            "title": "年龄",
            "description": "用户的年龄"
          },
          "birthday": {
            "type": "string",
            "title": "生日",
            "description": "用户的出生日期"
          },
          "registerIp": {
            "type": "string",
            "title": "注册IP",
            "description": "用户注册时的IP地址"
          },
          "isVip": {
            "type": "boolean",
            "title": "是否VIP会员",
            "description": "标识用户是否为VIP会员"
          },
          "avatar": {
            "type": "string",
            "title": "头像",
            "description": "用户的头像图片URL"
          },
          "city": {
            "type": "string",
            "title": "城市",
            "description": "用户所在城市"
          },
          "img": {
            "type": "string",
            "title": "图片",
            "description": "用户上传的图片"
          }
        },
        "xml": {
          "name": "User"
        },
        "required": [
          "createdAt",
          "gender",
          "age",
          "birthday",
          "registerIp",
          "isVip",
          "avatar",
          "city",
          "img"
        ]
      },
      "Localtion": {
        "type": "object",
        "properties": {
          "province": {
            "type": "string",
            "title": "省份"
          },
          "city": {
            "type": "string",
            "title": "城市"
          },
          "district": {
            "type": "string",
            "title": "区"
          }
        },
        "required": [
          "province",
          "city",
          "district"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "A": {
        "$ref": "#/components/schemas/B"
      },
      "B": {
        "type": "object",
        "properties": {
          "b1": {
            "type": "string"
          },
          "b2": {
            "type": "string"
          }
        },
        "required": [
          "b1",
          "b2"
        ]
      },
      "oneOf": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "aa": {
                "type": "string"
              }
            },
            "required": [
              "aa"
            ],
            "title": "",
            "description": ""
          },
          {
            "type": "object",
            "properties": {
              "bb": {
                "type": "string"
              }
            },
            "required": [
              "bb"
            ],
            "title": "",
            "description": ""
          }
        ]
      },
      "旧版本": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "examples": [
              "success"
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "examples": [
                  123
                ]
              },
              "name": {
                "type": "string",
                "examples": [
                  "Alice"
                ]
              },
              "email": {
                "type": "string",
                "examples": [
                  "alice@example.com"
                ]
              }
            },
            "required": [
              "id",
              "name",
              "email"
            ]
          }
        },
        "required": [
          "status",
          "data"
        ]
      },
      "新版本": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": [
              "OK"
            ]
          },
          "user": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "integer",
                "examples": [
                  123
                ]
              },
              "userName": {
                "type": "string",
                "examples": [
                  "Alice"
                ]
              },
              "userEmail": {
                "type": "string",
                "examples": [
                  "alice@example.com"
                ]
              }
            },
            "required": [
              "userId",
              "userName",
              "userEmail"
            ]
          }
        },
        "required": [
          "message",
          "user"
        ]
      },
      "category": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "标签",
            "enum": [
              "aa",
              "bb",
              "cc"
            ]
          }
        },
        "required": [
          "category"
        ]
      }
    },
    "securitySchemes": {
      "OAuth 2.0": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://github.com/login/oauth/authorize",
            "tokenUrl": "https://github.com/login/oauth/access_token",
            "scopes": {
              "scope": "",
              "read:user": "",
              "user:email": ""
            }
          },
          "implicit": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
            "scopes": {
              "openid": ""
            }
          },
          "clientCredentials": {},
          "password": {}
        },
        "type": "oauth2"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "apikey"
      }
    }
  },
  "servers": [],
  "security": []
}